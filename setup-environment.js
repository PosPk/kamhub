const https = require('https');

const token = 'eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6IjFrYnhacFJNQGJSI0tSbE1xS1lqIn0.eyJ1c2VyIjoicGE0MjIxMDgiLCJ0eXBlIjoiYXBpX2tleSIsImFwaV9rZXlfaWQiOiI0MmZmZTY1MC02OWI4LTRmZmQtYTFkOC02OWRkMjMwM2QyY2MiLCJpYXQiOjE3NjE3ODUzNDl9.SFHpwgy9kr-EH2CwN6K1REkOl7KCpiUnMk5ivTRljEaWl8iE-B-BMjaJxaFhpdB2dqcb33ky2oyfwxkU1Sszrbo-8UINnFO5SothY4P6WC8kSSHxFlLI2i0xGCa3YzgyYZ1Wgn2a0jf__ZcyZi7ZsaJkuold9NAeeGCCrAUbdVsr39-fLDL_EKh0iekq_tuO59f_BCmg7Poe7xKlmNYzu2hy3GnfNp3ueKW52H6kFkGwibixS3tWKCHkPpyTAjRztWKCnDZOOG6xDk4sSiPPMlZOEfFzzkpKkizQ9CykBC06SXwmT2uPRR2NyZJIY-PZd4AVZ34H1jXQ-NGquRPi_aYiywt3LtOVDRarpVErBdk6I0qO0Yf33zICvMN-yFpXuY_oSlE8v3C-02XHnYLsMXcHTsUB4ISkJrhglBkv-hTzuiQxwAEZp0eHOEq8YNz6qOLU3RcaNgg0DWGXMDrMzObYx2NknrZUCMbRFftIU-C1Ilo8Ayy98MwI3J77X62p';

const fs = require('fs');

console.log('üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø KAMCHATOUR HUB –ù–ê TIMEWEB CLOUD\n');
console.log('='.repeat(70));

const resources = {
  database: null,
  s3: null,
  firewall: null,
  existingServer: null
};

function apiRequest(method, path, data) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.timeweb.cloud',
      path: path,
      method: method,
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    };

    const req = https.request(options, (res) => {
      let body = '';
      res.on('data', chunk => body += chunk);
      res.on('end', () => {
        if (res.statusCode >= 200 && res.statusCode < 300) {
          try {
            resolve(JSON.parse(body));
          } catch(e) {
            resolve({ raw: body });
          }
        } else {
          reject(new Error(`HTTP ${res.statusCode}: ${body}`));
        }
      });
    });

    req.on('error', reject);
    req.on('timeout', () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    req.end();
  });
}

async function getExistingServer() {
  console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ VDS —Å–µ—Ä–≤–µ—Ä–∞...');
  try {
    const response = await apiRequest('GET', '/api/v1/servers');
    const servers = response.servers || [];
    
    if (servers.length > 0) {
      const server = servers[0];
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–µ—Ä–≤–µ—Ä: ${server.name}`);
      console.log(`   ID: ${server.id}`);
      console.log(`   IP: ${server.main_ipv4 || 'N/A'}`);
      console.log(`   –†–µ–≥–∏–æ–Ω: ${server.location}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${server.status}`);
      resources.existingServer = server;
      return server;
    } else {
      console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return null;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤:', error.message);
    return null;
  }
}

async function createDatabase() {
  console.log('\nüóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  const dbConfig = {
    name: 'kamchatour-db',
    type: 'postgres',
    hash_type: 'caching_sha2',
    preset_id: 1, // –ü–æ–ø—Ä–æ–±—É–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º preset
    comment: 'PostgreSQL –±–∞–∑–∞ –¥–ª—è KamchaTour Hub',
    is_only_local_ip_access: false,
    availability_zone: resources.existingServer?.availability_zone || 'nsk-1'
  };

  console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', JSON.stringify(dbConfig, null, 2));

  try {
    const response = await apiRequest('POST', '/api/v1/databases', dbConfig);
    
    if (response.db) {
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞!');
      console.log(`   ID: ${response.db.id}`);
      console.log(`   –ò–º—è: ${response.db.name}`);
      console.log(`   Host: ${response.db.host || '—Å–æ–∑–¥–∞—ë—Ç—Å—è...'}`);
      console.log(`   Port: ${response.db.port || 5432}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${response.db.status || 'creating'}`);
      resources.database = response.db;
      return response.db;
    } else {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î:', error.message);
    
    // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('\n‚öôÔ∏è –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');
    
    try {
      const altConfig = {
        name: 'kamchatour-db',
        type: 'postgres',
        preset_id: 1
      };
      
      const response = await apiRequest('POST', '/api/v1/databases', altConfig);
      if (response.db) {
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)!');
        resources.database = response.db;
        return response.db;
      }
    } catch (err) {
      console.log('‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞:', err.message);
    }
    
    return null;
  }
}

async function createS3Bucket() {
  console.log('\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ S3 Storage bucket...');
  
  const bucketConfig = {
    name: 'kamchatour-media',
    type: 'private',
    location: resources.existingServer?.location || 'ru-2'
  };

  console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', JSON.stringify(bucketConfig, null, 2));

  try {
    const response = await apiRequest('POST', '/api/v1/storages/buckets', bucketConfig);
    
    if (response.bucket) {
      console.log('‚úÖ S3 bucket —Å–æ–∑–¥–∞–Ω!');
      console.log(`   ID: ${response.bucket.id}`);
      console.log(`   –ò–º—è: ${response.bucket.name}`);
      console.log(`   Endpoint: ${response.bucket.hostname || 'N/A'}`);
      console.log(`   Access Key: ${response.bucket.access_key || '–±—É–¥–µ—Ç –≤ email'}`);
      console.log(`   Secret Key: ${response.bucket.secret_key ? '***' : '–±—É–¥–µ—Ç –≤ email'}`);
      resources.s3 = response.bucket;
      return response.bucket;
    } else {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è S3:', error.message);
    return null;
  }
}

async function setupFirewall() {
  console.log('\nüî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firewall...');
  
  if (!resources.existingServer) {
    console.log('‚ö†Ô∏è  –ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è Firewall');
    return null;
  }

  // –°–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—É –ø—Ä–∞–≤–∏–ª
  const groupConfig = {
    name: 'kamchatour-firewall',
    comment: 'Firewall –¥–ª—è KamchaTour Hub'
  };

  try {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø—Ä–∞–≤–∏–ª...');
    const groupResponse = await apiRequest('POST', '/api/v1/firewall/groups', groupConfig);
    
    if (!groupResponse.firewall_group) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É Firewall');
    }

    const groupId = groupResponse.firewall_group.id;
    console.log(`‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ (ID: ${groupId})`);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
    const rules = [
      { protocol: 'tcp', port_from: 22, port_to: 22, direction: 'ingress', cidr: '0.0.0.0/0', description: 'SSH' },
      { protocol: 'tcp', port_from: 80, port_to: 80, direction: 'ingress', cidr: '0.0.0.0/0', description: 'HTTP' },
      { protocol: 'tcp', port_from: 443, port_to: 443, direction: 'ingress', cidr: '0.0.0.0/0', description: 'HTTPS' },
      { protocol: 'tcp', port_from: 3000, port_to: 3000, direction: 'ingress', cidr: '0.0.0.0/0', description: 'Next.js' }
    ];

    console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª...');
    for (const rule of rules) {
      try {
        await apiRequest('POST', `/api/v1/firewall/groups/${groupId}/rules`, rule);
        console.log(`   ‚úÖ ${rule.description} (${rule.port_from})`);
      } catch (e) {
        console.log(`   ‚ö†Ô∏è  ${rule.description}: ${e.message}`);
      }
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É
    console.log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...');
    try {
      await apiRequest('POST', `/api/v1/servers/${resources.existingServer.id}/firewall`, {
        group_id: groupId
      });
      console.log('‚úÖ Firewall –ø—Ä–∏–º–µ–Ω—ë–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É');
    } catch (e) {
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É:', e.message);
    }

    resources.firewall = { id: groupId, name: 'kamchatour-firewall' };
    return resources.firewall;
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Firewall:', error.message);
    return null;
  }
}

async function saveResults() {
  console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
  
  const result = {
    timestamp: new Date().toISOString(),
    project: 'kamchatour-hub',
    server: resources.existingServer ? {
      id: resources.existingServer.id,
      name: resources.existingServer.name,
      ip: resources.existingServer.main_ipv4,
      location: resources.existingServer.location
    } : null,
    database: resources.database ? {
      id: resources.database.id,
      name: resources.database.name,
      host: resources.database.host,
      port: resources.database.port,
      login: resources.database.login,
      password: resources.database.password
    } : null,
    s3: resources.s3 ? {
      id: resources.s3.id,
      name: resources.s3.name,
      endpoint: resources.s3.hostname,
      access_key: resources.s3.access_key,
      secret_key: resources.s3.secret_key
    } : null,
    firewall: resources.firewall
  };

  fs.writeFileSync('timeweb-setup-result.json', JSON.stringify(result, null, 2));
  console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ timeweb-setup-result.json');

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º .env —Ñ–∞–π–ª
  if (result.database || result.s3) {
    let envContent = '# Timeweb Cloud Configuration\n';
    envContent += `# –°–æ–∑–¥–∞–Ω–æ: ${new Date().toLocaleString()}\n\n`;
    
    if (result.server) {
      envContent += `# VDS Server\n`;
      envContent += `SERVER_IP=${result.server.ip}\n\n`;
    }
    
    if (result.database) {
      envContent += `# PostgreSQL Database\n`;
      envContent += `DATABASE_URL=postgresql://${result.database.login}:${result.database.password}@${result.database.host}:${result.database.port}/${result.database.name}\n`;
      envContent += `DB_HOST=${result.database.host}\n`;
      envContent += `DB_PORT=${result.database.port}\n`;
      envContent += `DB_USER=${result.database.login}\n`;
      envContent += `DB_PASSWORD=${result.database.password}\n`;
      envContent += `DB_NAME=${result.database.name}\n\n`;
    }
    
    if (result.s3) {
      envContent += `# S3 Storage\n`;
      envContent += `S3_ENDPOINT=https://${result.s3.endpoint}\n`;
      envContent += `S3_BUCKET=${result.s3.name}\n`;
      envContent += `S3_ACCESS_KEY=${result.s3.access_key}\n`;
      envContent += `S3_SECRET_KEY=${result.s3.secret_key}\n`;
    }

    fs.writeFileSync('.env.timeweb', envContent);
    console.log('‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: .env.timeweb');
  }
}

async function run() {
  try {
    console.log('\nüîç –≠–¢–ê–ü 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤');
    await getExistingServer();

    console.log('\nüèóÔ∏è –≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤');
    await createDatabase();
    await createS3Bucket();
    await setupFirewall();

    console.log('\nüìä –≠–¢–ê–ü 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    await saveResults();

    console.log('\n' + '='.repeat(70));
    console.log('üéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!\n');
    
    console.log('üìã –°–û–ó–î–ê–ù–ù–´–ï –†–ï–°–£–†–°–´:');
    console.log(`   ‚Ä¢ VDS: ${resources.existingServer ? '‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
    console.log(`   ‚Ä¢ PostgreSQL: ${resources.database ? '‚úÖ –°–æ–∑–¥–∞–Ω–∞' : '‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω–∞'}`);
    console.log(`   ‚Ä¢ S3 Storage: ${resources.s3 ? '‚úÖ –°–æ–∑–¥–∞–Ω' : '‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω'}`);
    console.log(`   ‚Ä¢ Firewall: ${resources.firewall ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
    
    console.log('\nüìÇ –§–ê–ô–õ–´:');
    console.log('   ‚Ä¢ timeweb-setup-result.json - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
    console.log('   ‚Ä¢ .env.timeweb - –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è\n');
    
    console.log('üöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã timeweb-setup-result.json –∏ .env.timeweb');
    console.log('   2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.timeweb –≤ .env.production –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
    console.log('   3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É: ssh root@' + (resources.existingServer?.main_ipv4 || 'IP'));
    console.log('   4. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
    
  } catch (error) {
    console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    process.exit(1);
  }
}

run();
