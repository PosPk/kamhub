#!/bin/bash

###############################################################################
# KAMCHATOUR HUB - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –î–ï–ü–õ–û–ô –ù–ê TIMEWEB CLOUD
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ VDS/VPS Timeweb Cloud
###############################################################################

set -e

echo "üöÄ KAMCHATOUR HUB - –î–µ–ø–ª–æ–π –Ω–∞ Timeweb Cloud"
echo "============================================"
echo ""

# –¶–≤–µ—Ç–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${GREEN}‚úì${NC} $1"; }
log_warn() { echo -e "${YELLOW}‚ö†${NC} $1"; }
log_error() { echo -e "${RED}‚úó${NC} $1"; }
log_step() { echo -e "${BLUE}‚ñ∂${NC} $1"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Timeweb Cloud
log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
if [ -f /etc/os-release ]; then
    . /etc/os-release
    log_info "–û–°: $NAME $VERSION"
else
    log_warn "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –û–°"
fi

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
log_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
if command -v apt-get &> /dev/null; then
    # Ubuntu/Debian
    export DEBIAN_FRONTEND=noninteractive
    sudo apt-get update -qq
    sudo apt-get upgrade -y -qq
    log_info "–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (Ubuntu/Debian)"
elif command -v yum &> /dev/null; then
    # CentOS/RHEL
    sudo yum update -y -q
    log_info "–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (CentOS/RHEL)"
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js 20
log_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js 20..."
if ! command -v node &> /dev/null || [ $(node -v | cut -d'v' -f2 | cut -d'.' -f1) -lt 20 ]; then
    if command -v apt-get &> /dev/null; then
        curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
        sudo apt-get install -y nodejs
    elif command -v yum &> /dev/null; then
        curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -
        sudo yum install -y nodejs
    fi
    log_info "Node.js $(node -v) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    log_info "Node.js $(node -v) —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL
log_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL..."
if ! command -v psql &> /dev/null; then
    if command -v apt-get &> /dev/null; then
        sudo apt-get install -y postgresql postgresql-contrib
        sudo systemctl start postgresql
        sudo systemctl enable postgresql
    elif command -v yum &> /dev/null; then
        sudo yum install -y postgresql-server postgresql-contrib
        sudo postgresql-setup initdb
        sudo systemctl start postgresql
        sudo systemctl enable postgresql
    fi
    log_info "PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    log_info "PostgreSQL —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL
log_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
DB_NAME="kamchatour"
DB_USER="kamuser"
DB_PASS=$(openssl rand -base64 16 | tr -d "=+/" | cut -c1-16)

sudo -u postgres psql -tc "SELECT 1 FROM pg_database WHERE datname = '$DB_NAME'" | grep -q 1 || \
    sudo -u postgres psql -c "CREATE DATABASE $DB_NAME;"

sudo -u postgres psql -tc "SELECT 1 FROM pg_user WHERE usename = '$DB_USER'" | grep -q 1 || \
    sudo -u postgres psql -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASS';"

sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"
sudo -u postgres psql -d $DB_NAME -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
sudo -u postgres psql -d $DB_NAME -c "CREATE EXTENSION IF NOT EXISTS postgis;"

log_info "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Nginx
log_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Nginx..."
if ! command -v nginx &> /dev/null; then
    if command -v apt-get &> /dev/null; then
        sudo apt-get install -y nginx
    elif command -v yum &> /dev/null; then
        sudo yum install -y nginx
    fi
    sudo systemctl start nginx
    sudo systemctl enable nginx
    log_info "Nginx —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    log_info "Nginx —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PM2
log_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PM2..."
if ! command -v pm2 &> /dev/null; then
    sudo npm install -g pm2
    log_info "PM2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    log_info "PM2 —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
log_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
PROJECT_DIR="/var/www/kamchatour"
sudo mkdir -p $PROJECT_DIR
sudo chown -R $USER:$USER $PROJECT_DIR

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è)
if [ -f "package.json" ]; then
    log_info "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞..."
    rsync -av --exclude 'node_modules' --exclude '.git' --exclude '.next' ./ $PROJECT_DIR/
    cd $PROJECT_DIR
else
    log_warn "package.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω—É–∂–µ–Ω git clone"
    echo ""
    echo "–ö–ª–æ–Ω–∏—Ä—É–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ $PROJECT_DIR:"
    echo "  cd $PROJECT_DIR"
    echo "  git clone <your-repo-url> ."
    echo ""
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è..."
    cd $PROJECT_DIR
fi

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
log_step "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
JWT_SECRET=$(openssl rand -base64 32)

cat > .env << EOF
# KAMCHATOUR HUB - Timeweb Cloud Configuration
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ $(date)

# Database
DATABASE_URL=postgresql://$DB_USER:$DB_PASS@localhost:5432/$DB_NAME
DATABASE_SSL=false
DATABASE_MAX_CONNECTIONS=20

# Security
JWT_SECRET=$JWT_SECRET
JWT_EXPIRES_IN=7d
REFRESH_TOKEN_EXPIRES_IN=30d

# Application
NODE_ENV=production
NEXT_PUBLIC_APP_URL=http://$(hostname -I | awk '{print $1}'):3002

# AI APIs (–¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–ª—é—á–∏)
GROQ_API_KEY=
DEEPSEEK_API_KEY=
OPENROUTER_API_KEY=

# Maps & Weather
YANDEX_MAPS_API_KEY=
YANDEX_WEATHER_API_KEY=

# Payments
CLOUDPAYMENTS_PUBLIC_ID=
CLOUDPAYMENTS_API_SECRET=

# Notifications
SMTP_HOST=smtp.timeweb.ru
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=
SMTP_PASS=
EMAIL_FROM=noreply@kamchatour.ru

SMS_RU_API_ID=

TELEGRAM_BOT_TOKEN=
TELEGRAM_CHAT_ID=

# Monitoring
SENTRY_DSN=
NEXT_PUBLIC_SENTRY_DSN=
EOF

log_info ".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
log_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
npm install --production=false

# Build –ø—Ä–æ–µ–∫—Ç–∞
log_step "–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
npm run build
log_info "–ü—Ä–æ–µ–∫—Ç —Å–æ–±—Ä–∞–Ω"

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
log_step "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
npm run migrate:up 2>/dev/null || log_warn "–ú–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"

if [ -f "lib/database/seat_holds_schema.sql" ]; then
    PGPASSWORD=$DB_PASS psql -h localhost -U $DB_USER -d $DB_NAME -f lib/database/seat_holds_schema.sql 2>/dev/null || log_warn "seat_holds —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

log_info "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PM2
log_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PM2..."
pm2 delete kamchatour-hub 2>/dev/null || true
pm2 start npm --name "kamchatour-hub" -- start
pm2 save
pm2 startup | grep -v "PM2" | sudo bash
log_info "PM2 –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx
log_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx..."
DOMAIN=$(hostname -f 2>/dev/null || echo "localhost")
SERVER_IP=$(hostname -I | awk '{print $1}')

sudo tee /etc/nginx/sites-available/kamchatour > /dev/null << 'NGINX_EOF'
server {
    listen 80;
    server_name _;

    # Security headers
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # –õ–æ–≥–∏
    access_log /var/log/nginx/kamchatour_access.log;
    error_log /var/log/nginx/kamchatour_error.log;

    # –†–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    client_max_body_size 10M;

    # Proxy –∫ Next.js
    location / {
        proxy_pass http://127.0.0.1:3002;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # –¢–∞–π–º–∞—É—Ç—ã
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã Next.js
    location /_next/static {
        proxy_pass http://127.0.0.1:3002;
        proxy_cache_valid 200 60m;
        add_header Cache-Control "public, max-age=3600, immutable";
    }
}
NGINX_EOF

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx
if [ -d "/etc/nginx/sites-enabled" ]; then
    sudo rm -f /etc/nginx/sites-enabled/default
    sudo ln -sf /etc/nginx/sites-available/kamchatour /etc/nginx/sites-enabled/
else
    # CentOS/RHEL
    sudo cp /etc/nginx/sites-available/kamchatour /etc/nginx/conf.d/kamchatour.conf
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx
if sudo nginx -t; then
    sudo systemctl reload nginx
    log_info "Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
else
    log_error "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx"
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firewall
log_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall..."
if command -v ufw &> /dev/null; then
    sudo ufw allow 80/tcp
    sudo ufw allow 443/tcp
    sudo ufw allow 22/tcp
    sudo ufw --force enable
    log_info "UFW –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
elif command -v firewall-cmd &> /dev/null; then
    sudo firewall-cmd --permanent --add-service=http
    sudo firewall-cmd --permanent --add-service=https
    sudo firewall-cmd --permanent --add-service=ssh
    sudo firewall-cmd --reload
    log_info "Firewalld –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö backup
log_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ backup..."
if [ -f "scripts/setup-backup-cron.sh" ]; then
    chmod +x scripts/setup-backup-cron.sh
    bash scripts/setup-backup-cron.sh
    log_info "Backup –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)"
fi

# SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (Let's Encrypt)
log_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL..."
echo ""
echo "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
echo ""
echo "  sudo apt-get install certbot python3-certbot-nginx  # Ubuntu/Debian"
echo "  –∏–ª–∏"
echo "  sudo yum install certbot python3-certbot-nginx      # CentOS/RHEL"
echo ""
echo "–ó–∞—Ç–µ–º:"
echo "  sudo certbot --nginx -d –≤–∞—à-–¥–æ–º–µ–Ω.ru"
echo ""

# –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
echo ""
echo "============================================"
echo -e "${GREEN}‚úÖ –î–ï–ü–õ–û–ô –ó–ê–í–ï–†–®–ï–ù!${NC}"
echo "============================================"
echo ""
echo "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:"
echo "  IP –∞–¥—Ä–µ—Å:     $SERVER_IP"
echo "  –î–æ–º–µ–Ω:        $DOMAIN"
echo "  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:  $DB_NAME"
echo "  DB User:      $DB_USER"
echo "  DB Password:  $DB_PASS"
echo ""
echo "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É:"
echo "  http://$SERVER_IP"
echo "  http://$DOMAIN"
echo ""
echo "üìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  pm2 status              - —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
echo "  pm2 logs kamchatour-hub - –ª–æ–≥–∏"
echo "  pm2 restart kamchatour-hub - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"
echo "  sudo systemctl status nginx - —Å—Ç–∞—Ç—É—Å Nginx"
echo "  sudo nginx -t           - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
echo ""
echo "üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
echo "  –ü—Ä–æ–µ–∫—Ç:      $PROJECT_DIR"
echo "  .env —Ñ–∞–π–ª:   $PROJECT_DIR/.env"
echo "  Nginx:       /etc/nginx/sites-available/kamchatour"
echo "  –õ–æ–≥–∏ Nginx:  /var/log/nginx/kamchatour_*.log"
echo "  –õ–æ–≥–∏ PM2:    ~/.pm2/logs/"
echo ""
echo "‚ö†Ô∏è  –í–ê–ñ–ù–û:"
echo "  1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ë–î: $DB_PASS"
echo "  2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–º–µ–Ω –≤ Timeweb Cloud –ø–∞–Ω–µ–ª–∏"
echo "  3. –î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª"
echo "  4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (—Å–º. –≤—ã—à–µ)"
echo ""
echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: $PROJECT_DIR/TIMEWEB_–î–ï–ü–õ–û–ô.md"
echo ""
log_info "–ì–æ—Ç–æ–≤–æ! üéâ"
