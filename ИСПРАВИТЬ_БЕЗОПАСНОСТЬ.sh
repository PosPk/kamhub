#!/bin/bash

###############################################################################
# –°–ö–†–ò–ü–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
###############################################################################

echo "üîí –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò"
echo "===================================="
echo ""

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log_error() { echo -e "${RED}‚úó${NC} $1"; }
log_success() { echo -e "${GREEN}‚úì${NC} $1"; }
log_warn() { echo -e "${YELLOW}‚ö†${NC} $1"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
if [ ! -d .git ]; then
    log_error "–ù–µ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!"
    exit 1
fi

echo "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö git
TRACKED_ENV=$(git ls-files | grep "^\.env$")
TRACKED_TOKEN=$(git ls-files | grep "^token\.txt$")

if [ -z "$TRACKED_ENV" ] && [ -z "$TRACKED_TOKEN" ]; then
    log_success "–°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è git"
    log_success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–µ–∑–æ–ø–∞—Å–µ–Ω!"
    exit 0
fi

echo "üö® –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:"
echo ""

if [ ! -z "$TRACKED_ENV" ]; then
    log_error ".env —Ñ–∞–π–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è git"
fi

if [ ! -z "$TRACKED_TOKEN" ]; then
    log_error "token.txt –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è git"
fi

echo ""
echo "‚ùì –ß—Ç–æ –¥–µ–ª–∞—Ç—å?"
echo ""
echo "1) –£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ git (—Ñ–∞–π–ª—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ)"
echo "2) –£–¥–∞–ª–∏—Ç—å –∏–∑ git + –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é (–ù–ï–û–ë–†–ê–¢–ò–ú–û!)"
echo "3) –û—Ç–º–µ–Ω–∞"
echo ""
read -p "–í—ã–±–µ—Ä–∏—Ç–µ (1-3): " choice

case $choice in
    1)
        echo ""
        echo "üìù –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ git..."
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ git –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        if [ ! -z "$TRACKED_ENV" ]; then
            git rm --cached .env
            log_success ".env —É–¥–∞–ª–µ–Ω –∏–∑ git (—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ)"
        fi
        
        if [ ! -z "$TRACKED_TOKEN" ]; then
            git rm token.txt
            log_success "token.txt —É–¥–∞–ª–µ–Ω"
        fi
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ .env –ø—Ä–∏–º–µ—Ä—ã
        git rm --cached .env.timeweb-ai .env.timeweb-apps 2>/dev/null || true
        git rm --cached .env.production.example .env.local.example 2>/dev/null || true
        
        echo ""
        echo "–°–æ–∑–¥–∞—Ç—å commit? (y/n)"
        read -p "> " commit_choice
        
        if [[ $commit_choice =~ ^[Yy]$ ]]; then
            git commit -m "security: remove sensitive files from git"
            log_success "Commit —Å–æ–∑–¥–∞–Ω"
            
            echo ""
            echo "Push –≤ remote? (y/n)"
            read -p "> " push_choice
            
            if [[ $push_choice =~ ^[Yy]$ ]]; then
                git push
                log_success "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ remote"
            fi
        fi
        
        echo ""
        log_warn "‚ö†Ô∏è  –í–ê–ñ–ù–û: –§–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏"
        log_warn "–ò—Å—Ç–æ—Ä–∏—è git –µ—â—ë —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–∫—Ä–µ—Ç—ã!"
        log_warn "–î–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–ø—Ü–∏—é 2"
        ;;
        
    2)
        echo ""
        log_error "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!"
        log_error "–ò—Å—Ç–æ—Ä–∏—è git –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∞"
        log_error "–í—Å–µ —á–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ"
        echo ""
        echo "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ YES –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)"
        read -p "> " confirm
        
        if [ "$confirm" != "YES" ]; then
            log_warn "–û—Ç–º–µ–Ω–µ–Ω–æ"
            exit 0
        fi
        
        echo ""
        echo "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ git-filter-repo..."
        
        if ! command -v git-filter-repo &> /dev/null; then
            echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ git-filter-repo..."
            
            if command -v pip3 &> /dev/null; then
                pip3 install git-filter-repo
            elif command -v pip &> /dev/null; then
                pip install git-filter-repo
            else
                log_error "pip –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:"
                log_error "pip install git-filter-repo"
                exit 1
            fi
        fi
        
        log_success "git-filter-repo –¥–æ—Å—Ç—É–ø–µ–Ω"
        
        echo ""
        echo "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ backup..."
        BACKUP_DIR="git-backup-$(date +%Y%m%d-%H%M%S)"
        git clone . "../$BACKUP_DIR"
        log_success "Backup —Å–æ–∑–¥–∞–Ω: ../$BACKUP_DIR"
        
        echo ""
        echo "üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏..."
        
        # –£–¥–∞–ª—è–µ–º .env –∏–∑ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
        if [ ! -z "$TRACKED_ENV" ]; then
            git filter-repo --invert-paths --path .env --force
            log_success ".env —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"
        fi
        
        # –£–¥–∞–ª—è–µ–º token.txt
        if [ ! -z "$TRACKED_TOKEN" ]; then
            git filter-repo --invert-paths --path token.txt --force
            log_success "token.txt —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"
        fi
        
        echo ""
        log_success "–ò—Å—Ç–æ—Ä–∏—è git –æ—á–∏—â–µ–Ω–∞!"
        echo ""
        log_warn "‚ö†Ô∏è  –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
        echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: git log --all"
        echo "2. Force push: git push origin --force --all"
        echo "3. –£–≤–µ–¥–æ–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ re-clone"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:"
        echo "  cd .."
        echo "  rm -rf kamchatour"
        echo "  git clone <repo-url>"
        ;;
        
    3)
        log_warn "–û—Ç–º–µ–Ω–µ–Ω–æ"
        exit 0
        ;;
        
    *)
        log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
        exit 1
        ;;
esac

echo ""
echo "‚úÖ –ì–û–¢–û–í–û!"
echo ""
echo "üìã –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:"
echo ""
echo "1. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π JWT_SECRET:"
echo "   openssl rand -base64 32"
echo ""
echo "2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π .env —Ñ–∞–π–ª:"
echo "   cp .env.example .env"
echo "   nano .env  # –î–æ–±–∞–≤—å—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã"
echo ""
echo "3. –í Timeweb Cloud –¥–æ–±–∞–≤—å—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã —á–µ—Ä–µ–∑ UI:"
echo "   https://timeweb.cloud/my/projects/1883095"
echo "   Settings ‚Üí Environment Variables"
echo ""
echo "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .gitignore:"
echo "   cat .gitignore | grep .env"
echo ""

log_success "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∞! üîí"
