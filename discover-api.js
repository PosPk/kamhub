const https = require('https');

const token = 'eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6IjFrYnhacFJNQGJSI0tSbE1xS1lqIn0.eyJ1c2VyIjoicGE0MjIxMDgiLCJ0eXBlIjoiYXBpX2tleSIsImFwaV9rZXlfaWQiOiI0MmZmZTY1MC02OWI4LTRmZmQtYTFkOC02OWRkMjMwM2QyY2MiLCJpYXQiOjE3NjE3ODUzNDl9.SFHpwgy9kr-EH2CwN6K1REkOl7KCpiUnMk5ivTRljEaWl8iE-B-BMjaJxaFhpdB2dqcb33ky2oyfwxkU1Sszrbo-8UINnFO5SothY4P6WC8kSSHxFlLI2i0xGCa3YzgyYZ1Wgn2a0jf__ZcyZi7ZsaJkuold9NAeeGCCrAUbdVsr39-fLDL_EKh0iekq_tuO59f_BCmg7Poe7xKlmNYzu2hy3GnfNp3ueKW52H6kFkGwibixS3tWKCHkPpyTAjRztWKCnDZOOG6xDk4sSiPPMlZOEfFzzkpKkizQ9CykBC06SXwmT2uPRR2NyZJIY-PZd4AVZ34H1jXQ-NGquRPi_aYiywt3LtOVDRarpVErBdk6I0qO0Yf33zICvMN-yFpXuY_oSlE8v3C-02XHnYLsMXcHTsUB4ISkJrhglBkv-hTzuiQxwAEZp0eHOEq8YNz6qOLU3RcaNgg0DWGXMDrMzObYx2NknrZUCMbRFftIU-C1Ilo8Ayy98MwI3J77X62p';

function apiRequest(method, path, data) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.timeweb.cloud',
      path: path,
      method: method,
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      timeout: 10000
    };

    const req = https.request(options, (res) => {
      let body = '';
      res.on('data', chunk => body += chunk);
      res.on('end', () => {
        try {
          resolve({ status: res.statusCode, data: JSON.parse(body) });
        } catch(e) {
          resolve({ status: res.statusCode, data: body });
        }
      });
    });

    req.on('error', reject);
    req.on('timeout', () => {
      req.destroy();
      reject(new Error('Timeout'));
    });

    if (data) req.write(JSON.stringify(data));
    req.end();
  });
}

async function discover() {
  console.log('üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï TIMEWEB CLOUD API\n');
  console.log('='.repeat(60));

  // 1. –ü—Ä–µ—Å–µ—Ç—ã –¥–ª—è –ë–î
  console.log('\nüìä –ü–†–ï–°–ï–¢–´ –î–õ–Ø –ë–ê–ó –î–ê–ù–ù–´–•:');
  try {
    const res = await apiRequest('GET', '/api/v1/presets/dbs');
    if (res.status === 200) {
      const presets = res.data.databases_presets || res.data.dbs_presets || [];
      console.log(`–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ—Å–µ—Ç–æ–≤: ${presets.length}`);
      presets.slice(0, 5).forEach(p => {
        console.log(`  ‚Ä¢ ID: ${p.id}, Type: ${p.type || 'N/A'}, CPU: ${p.cpu}, RAM: ${p.ram}MB, Disk: ${p.disk}MB, Price: ${p.price}‚ÇΩ/–º–µ—Å`);
      });
    } else {
      console.log('‚ö†Ô∏è  –°—Ç–∞—Ç—É—Å:', res.status);
    }
  } catch (e) {
    console.log('‚ùå', e.message);
  }

  // 2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –ë–î
  console.log('\n‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¢–û–† –ë–î:');
  try {
    const res = await apiRequest('GET', '/api/v1/configurator/databases');
    console.log('–°—Ç–∞—Ç—É—Å:', res.status);
    if (res.status === 200) {
      console.log('–î–∞–Ω–Ω—ã–µ:', JSON.stringify(res.data, null, 2).substring(0, 500));
    }
  } catch (e) {
    console.log('‚ùå', e.message);
  }

  // 3. –°–æ—Ñ—Ç –¥–ª—è –ë–î
  console.log('\nüíø –°–û–§–¢ –î–õ–Ø –ë–î:');
  try {
    const res = await apiRequest('GET', '/api/v1/software/databases');
    console.log('–°—Ç–∞—Ç—É—Å:', res.status);
    if (res.status === 200) {
      const software = res.data.databases_software || [];
      console.log(`–ù–∞–π–¥–µ–Ω–æ: ${software.length}`);
      software.slice(0, 10).forEach(s => {
        console.log(`  ‚Ä¢ ID: ${s.id}, Name: ${s.name}, Version: ${s.version || 'N/A'}`);
      });
    }
  } catch (e) {
    console.log('‚ùå', e.message);
  }

  // 4. –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ë–î (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
  console.log('\nüì¶ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ë–î:');
  try {
    const res = await apiRequest('GET', '/api/v1/databases');
    if (res.status === 200) {
      const dbs = res.data.dbs || [];
      console.log(`–ù–∞–π–¥–µ–Ω–æ: ${dbs.length}`);
      dbs.forEach(db => {
        console.log(`  ‚Ä¢ ${db.name} (${db.type})`);
      });
    }
  } catch (e) {
    console.log('‚ùå', e.message);
  }

  // 5. S3 Storage - –ø–æ–ø—Ä–æ–±—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  console.log('\nüíæ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø S3 (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è):');
  try {
    const res = await apiRequest('POST', '/api/v1/storages/buckets', {
      name: 'test-bucket-' + Date.now(),
      type: 'public'
    });
    console.log('–°—Ç–∞—Ç—É—Å:', res.status);
    if (res.status === 201 || res.status === 200) {
      console.log('‚úÖ S3 —Å–æ–∑–¥–∞—ë—Ç—Å—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π!');
      console.log('–î–∞–Ω–Ω—ã–µ:', JSON.stringify(res.data, null, 2).substring(0, 300));
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π bucket
      if (res.data.bucket?.id) {
        try {
          await apiRequest('DELETE', `/api/v1/storages/buckets/${res.data.bucket.id}`);
          console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π bucket —É–¥–∞–ª—ë–Ω');
        } catch (e) {}
      }
    } else {
      console.log('–û—à–∏–±–∫–∞:', res.data);
    }
  } catch (e) {
    console.log('‚ùå', e.message);
  }

  // 6. Firewall groups
  console.log('\nüî• –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø FIREWALL:');
  try {
    const res = await apiRequest('POST', '/api/v1/firewall/groups', {
      name: 'test-firewall-' + Date.now(),
      description: 'Test'
    });
    console.log('–°—Ç–∞—Ç—É—Å:', res.status);
    if (res.status === 201 || res.status === 200) {
      console.log('‚úÖ Firewall —Å–æ–∑–¥–∞—ë—Ç—Å—è!');
      console.log('–î–∞–Ω–Ω—ã–µ:', JSON.stringify(res.data, null, 2).substring(0, 300));
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≥—Ä—É–ø–ø—É
      if (res.data.firewall_group?.id) {
        try {
          await apiRequest('DELETE', `/api/v1/firewall/groups/${res.data.firewall_group.id}`);
          console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π firewall —É–¥–∞–ª—ë–Ω');
        } catch (e) {}
      }
    } else {
      console.log('–û—à–∏–±–∫–∞:', res.data);
    }
  } catch (e) {
    console.log('‚ùå', e.message);
  }

  console.log('\n' + '='.repeat(60));
  console.log('üéØ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û\n');
}

discover();
