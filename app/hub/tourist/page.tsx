'use client';

import React, { useState, useEffect } from 'react';
import { Tour, Weather } from '@/types';
import { AIChatWidget } from '@/components/AIChatWidget';
import { TransferSearchWidget } from '@/components/TransferSearchWidget';

export default function TouristDashboard() {
  const [tours, setTours] = useState<Tour[]>([]);
  const [weather, setWeather] = useState<Weather | null>(null);
  const [loading, setLoading] = useState(true);
  const [selectedTab, setSelectedTab] = useState('tours');
  const [filters, setFilters] = useState({
    activity: '',
    priceRange: [0, 50000],
    difficulty: '',
  });
  const [transferResults, setTransferResults] = useState<any[]>([]);

  useEffect(() => {
    fetchTours();
    fetchWeather();
  }, []);

  const fetchTours = async () => {
    try {
      const response = await fetch('/api/tours');
      const data = await response.json();
      if (data.success) {
        setTours(data.data.tours);
      }
    } catch (error) {
      console.error('Error fetching tours:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchWeather = async () => {
    try {
      // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–∞-–ö–∞–º—á–∞—Ç—Å–∫–æ–≥–æ
      const response = await fetch('/api/weather?lat=53.0375&lng=158.6556&location=–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫-–ö–∞–º—á–∞—Ç—Å–∫–∏–π');
      const data = await response.json();
      if (data.success) {
        setWeather(data.data);
      }
    } catch (error) {
      console.error('Error fetching weather:', error);
    }
  };

  const getActivityIcon = (activity: string) => {
    const icons: { [key: string]: string } = {
      hiking: 'ü•æ',
      sightseeing: 'üëÅÔ∏è',
      wildlife: 'üêª',
      fishing: 'üé£',
      skiing: 'üéø',
      diving: 'ü§ø',
    };
    return icons[activity] || 'üèîÔ∏è';
  };

  const getDifficultyColor = (difficulty: string) => {
    const colors: { [key: string]: string } = {
      easy: 'text-green-400',
      medium: 'text-yellow-400',
      hard: 'text-red-400',
    };
    return colors[difficulty] || 'text-gray-400';
  };

  const getWeatherIcon = (condition: string) => {
    const icons: { [key: string]: string } = {
      clear: '‚òÄÔ∏è',
      mostly_clear: 'üå§Ô∏è',
      partly_cloudy: '‚õÖ',
      overcast: '‚òÅÔ∏è',
      rain: 'üåßÔ∏è',
      snow: '‚ùÑÔ∏è',
      thunderstorm: '‚õàÔ∏è',
      fog: 'üå´Ô∏è',
    };
    return icons[condition] || 'üå§Ô∏è';
  };

  const getSafetyLevelColor = (level: string) => {
    const colors: { [key: string]: string } = {
      excellent: 'text-green-400',
      good: 'text-blue-400',
      difficult: 'text-yellow-400',
      dangerous: 'text-red-400',
    };
    return colors[level] || 'text-gray-400';
  };

  const tabs = [
    { id: 'tours', name: '–¢—É—Ä—ã', icon: 'üèîÔ∏è' },
    { id: 'transfers', name: '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä—ã', icon: 'üöå' },
    { id: 'weather', name: '–ü–æ–≥–æ–¥–∞', icon: 'üå§Ô∏è' },
    { id: 'ai', name: 'AI-–ø–æ–º–æ—â–Ω–∏–∫', icon: 'ü§ñ' },
    { id: 'favorites', name: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ', icon: '‚ù§Ô∏è' },
  ];

  if (loading) {
    return (
      <div className="min-h-screen bg-premium-black flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-premium-gold border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-white text-lg">–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä—ã...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-premium-black">
      {/* Header */}
      <div className="bg-gradient-to-r from-premium-black to-premium-gold/10 border-b border-premium-gold/20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-white">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –¢—É—Ä–∏—Å—Ç!</h1>
              <p className="text-white/70 mt-1">–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—É—é –ö–∞–º—á–∞—Ç–∫—É</p>
            </div>
            <div className="flex items-center space-x-4">
              {weather && (
                <div className="text-right">
                  <div className="flex items-center space-x-2">
                    <span className="text-2xl">{getWeatherIcon(weather.condition)}</span>
                    <span className="text-white text-lg font-bold">{weather.temperature}¬∞C</span>
                  </div>
                  <p className="text-white/70 text-sm">{weather.location}</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div className="flex space-x-1 bg-white/5 rounded-xl p-1 mb-8">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              onClick={() => setSelectedTab(tab.id)}
              className={`flex-1 flex items-center justify-center space-x-2 py-3 px-4 rounded-lg transition-colors ${
                selectedTab === tab.id
                  ? 'bg-premium-gold text-premium-black'
                  : 'text-white/70 hover:text-white hover:bg-white/10'
              }`}
            >
              <span className="text-lg">{tab.icon}</span>
              <span className="font-medium">{tab.name}</span>
            </button>
          ))}
        </div>

        {/* Tours Tab */}
        {selectedTab === 'tours' && (
          <div className="space-y-6">
            {/* Filters */}
            <div className="bg-white/5 rounded-2xl p-6">
              <h3 className="text-xl font-bold text-white mb-4">–§–∏–ª—å—Ç—Ä—ã</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-white/70 mb-2">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</label>
                  <select
                    value={filters.activity}
                    onChange={(e) => setFilters({ ...filters, activity: e.target.value })}
                    className="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-premium-gold"
                  >
                    <option value="">–í—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</option>
                    <option value="hiking">–ü–µ—à–∏–µ –ø–æ—Ö–æ–¥—ã</option>
                    <option value="sightseeing">–≠–∫—Å–∫—É—Ä—Å–∏–∏</option>
                    <option value="wildlife">–î–∏–∫–∞—è –ø—Ä–∏—Ä–æ–¥–∞</option>
                    <option value="fishing">–†—ã–±–∞–ª–∫–∞</option>
                    <option value="skiing">–õ—ã–∂–∏</option>
                    <option value="diving">–î–∞–π–≤–∏–Ω–≥</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-white/70 mb-2">–°–ª–æ–∂–Ω–æ—Å—Ç—å</label>
                  <select
                    value={filters.difficulty}
                    onChange={(e) => setFilters({ ...filters, difficulty: e.target.value })}
                    className="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-premium-gold"
                  >
                    <option value="">–õ—é–±–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å</option>
                    <option value="easy">–õ–µ–≥–∫–∞—è</option>
                    <option value="medium">–°—Ä–µ–¥–Ω—è—è</option>
                    <option value="hard">–°–ª–æ–∂–Ω–∞—è</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-white/70 mb-2">–¶–µ–Ω–∞ –¥–æ</label>
                  <input
                    type="number"
                    value={filters.priceRange[1]}
                    onChange={(e) => setFilters({ ...filters, priceRange: [filters.priceRange[0], parseInt(e.target.value)] })}
                    className="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-premium-gold"
                    placeholder="50000"
                  />
                </div>
              </div>
            </div>

            {/* Tours Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {tours.map((tour) => (
                <div key={tour.id} className="bg-white/5 rounded-2xl overflow-hidden border border-white/10 hover:border-premium-gold/50 transition-colors">
                  <div className="aspect-video bg-gradient-to-br from-premium-gold/20 to-premium-black relative">
                    {tour.images && tour.images.length > 0 ? (
                      <img
                        src={tour.images[0]}
                        alt={tour.title}
                        className="w-full h-full object-cover"
                      />
                    ) : (
                      <div className="w-full h-full flex items-center justify-center">
                        <span className="text-6xl">{getActivityIcon(tour.activity)}</span>
                      </div>
                    )}
                    <div className="absolute top-4 right-4 bg-premium-gold text-premium-black px-3 py-1 rounded-full text-sm font-bold">
                      {tour.priceFrom.toLocaleString()}‚ÇΩ
                    </div>
                  </div>
                  
                  <div className="p-6">
                    <div className="flex items-start justify-between mb-3">
                      <h3 className="text-xl font-bold text-white">{tour.title}</h3>
                      <div className="flex items-center space-x-1">
                        <span className="text-premium-gold">‚≠ê</span>
                        <span className="text-white font-bold">{tour.rating}</span>
                        <span className="text-white/50">({tour.reviewsCount})</span>
                      </div>
                    </div>
                    
                    <p className="text-white/70 text-sm mb-4 line-clamp-2">{tour.description}</p>
                    
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center space-x-4 text-sm text-white/70">
                        <span className="flex items-center space-x-1">
                          <span>{getActivityIcon(tour.activity)}</span>
                          <span className="capitalize">{tour.activity}</span>
                        </span>
                        <span className={`flex items-center space-x-1 ${getDifficultyColor(tour.difficulty)}`}>
                          <span>‚ö°</span>
                          <span className="capitalize">{tour.difficulty}</span>
                        </span>
                        <span className="flex items-center space-x-1">
                          <span>‚è±Ô∏è</span>
                          <span>{tour.duration}</span>
                        </span>
                      </div>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <div className="text-sm text-white/70">
                        <span>üë• {tour.minParticipants}-{tour.maxParticipants} —á–µ–ª.</span>
                      </div>
                      <button className="px-6 py-2 bg-premium-gold text-premium-black rounded-xl hover:bg-premium-gold/90 transition-colors font-bold">
                        –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Weather Tab */}
        {selectedTab === 'weather' && weather && (
          <div className="space-y-6">
            <div className="bg-white/5 rounded-2xl p-6">
              <h3 className="text-2xl font-bold text-white mb-6">–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                <div className="text-center">
                  <div className="text-4xl mb-2">{getWeatherIcon(weather.condition)}</div>
                  <div className="text-3xl font-bold text-white">{weather.temperature}¬∞C</div>
                  <div className="text-white/70 capitalize">{weather.condition}</div>
                </div>
                
                <div className="text-center">
                  <div className="text-2xl mb-2">üí®</div>
                  <div className="text-xl font-bold text-white">{weather.windSpeed} –∫–º/—á</div>
                  <div className="text-white/70">–í–µ—Ç–µ—Ä</div>
                </div>
                
                <div className="text-center">
                  <div className="text-2xl mb-2">üíß</div>
                  <div className="text-xl font-bold text-white">{weather.humidity}%</div>
                  <div className="text-white/70">–í–ª–∞–∂–Ω–æ—Å—Ç—å</div>
                </div>
                
                <div className="text-center">
                  <div className="text-2xl mb-2">üëÅÔ∏è</div>
                  <div className="text-xl font-bold text-white">{weather.visibility} –∫–º</div>
                  <div className="text-white/70">–í–∏–¥–∏–º–æ—Å—Ç—å</div>
                </div>
              </div>
              
              <div className="border-t border-white/10 pt-6">
                <div className="flex items-center justify-between mb-4">
                  <h4 className="text-lg font-bold text-white">–£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h4>
                  <span className={`text-lg font-bold ${getSafetyLevelColor(weather.safetyLevel)}`}>
                    {weather.safetyLevel === 'excellent' && '–û—Ç–ª–∏—á–Ω—ã–π'}
                    {weather.safetyLevel === 'good' && '–•–æ—Ä–æ—à–∏–π'}
                    {weather.safetyLevel === 'difficult' && '–°–ª–æ–∂–Ω—ã–π'}
                    {weather.safetyLevel === 'dangerous' && '–û–ø–∞—Å–Ω—ã–π'}
                  </span>
                </div>
                
                <div className="space-y-2">
                  {weather.recommendations?.map((rec, index) => (
                    <div key={index} className="text-white/70 text-sm">
                      {rec}
                    </div>
                  ))}
                </div>
              </div>
            </div>
            
            {/* Forecast */}
            {weather.forecast && weather.forecast.length > 0 && (
              <div className="bg-white/5 rounded-2xl p-6">
                <h3 className="text-xl font-bold text-white mb-6">–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é</h3>
                <div className="grid grid-cols-1 md:grid-cols-7 gap-4">
                  {weather.forecast.map((day, index) => (
                    <div key={index} className="text-center">
                      <div className="text-sm text-white/70 mb-2">
                        {day.date.toLocaleDateString('ru-RU', { weekday: 'short' })}
                      </div>
                      <div className="text-2xl mb-2">{getWeatherIcon(day.condition)}</div>
                      <div className="text-white font-bold">{day.temperature.max}¬∞</div>
                      <div className="text-white/70 text-sm">{day.temperature.min}¬∞</div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}

        {/* AI Tab */}
        {selectedTab === 'ai' && (
          <div className="max-w-4xl mx-auto">
            <AIChatWidget userId="tourist-1" />
          </div>
        )}

        {/* Favorites Tab */}
        {selectedTab === 'favorites' && (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">‚ù§Ô∏è</div>
            <h3 className="text-2xl font-bold text-white mb-2">–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç—É—Ä—ã</h3>
            <p className="text-white/70">–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç—É—Ä—ã</p>
          </div>
        )}
      </div>
    </div>
  );
}