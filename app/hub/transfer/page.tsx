'use client';

import React, { useState, useEffect } from 'react';
import { Weather } from '@/types';
import { TransferSearchWidget } from '@/components/TransferSearchWidget';

export default function TransferDashboard() {
  const [weather, setWeather] = useState<Weather | null>(null);
  const [loading, setLoading] = useState(true);
  const [selectedTab, setSelectedTab] = useState('search');
  const [transferResults, setTransferResults] = useState<any[]>([]);

  useEffect(() => {
    fetchWeather();
  }, []);

  const fetchWeather = async () => {
    try {
      const response = await fetch('/api/weather?lat=53.0375&lng=158.6556&location=–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫-–ö–∞–º—á–∞—Ç—Å–∫–∏–π');
      const data = await response.json();
      if (data.success) {
        setWeather(data.data);
      }
    } catch (error) {
      console.error('Error fetching weather:', error);
    } finally {
      setLoading(false);
    }
  };

  const tabs = [
    { id: 'search', name: '–ü–æ–∏—Å–∫', icon: 'üîç' },
    { id: 'routes', name: '–ú–∞—Ä—à—Ä—É—Ç—ã', icon: 'üó∫Ô∏è' },
    { id: 'vehicles', name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', icon: 'üöå' },
    { id: 'drivers', name: '–í–æ–¥–∏—Ç–µ–ª–∏', icon: 'üë®‚Äç‚úàÔ∏è' },
    { id: 'schedule', name: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', icon: 'üìÖ' },
    { id: 'bookings', name: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', icon: 'üé´' },
    { id: 'analytics', name: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', icon: 'üìä' },
  ];

  const mockRoutes = [
    {
      id: '1',
      name: '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫ - –î–æ–ª–∏–Ω–∞ –≥–µ–π–∑–µ—Ä–æ–≤',
      distance: '180 –∫–º',
      duration: '3 —á–∞—Å–∞',
      stops: ['–ï–ª–∏–∑–æ–≤–æ', '–ú–∏–ª—å–∫–æ–≤–æ', '–î–æ–ª–∏–Ω–∞ –≥–µ–π–∑–µ—Ä–æ–≤'],
      price: 2500,
      status: 'active',
      weatherDependent: true,
    },
    {
      id: '2',
      name: '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫ - –ê–≤–∞—á–∏–Ω—Å–∫–∏–π –≤—É–ª–∫–∞–Ω',
      distance: '45 –∫–º',
      duration: '1.5 —á–∞—Å–∞',
      stops: ['–ë–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞', '–ü–æ–¥–Ω–æ–∂–∏–µ –≤—É–ª–∫–∞–Ω–∞'],
      price: 1500,
      status: 'active',
      weatherDependent: true,
    },
    {
      id: '3',
      name: '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫ - –ú–µ–¥–≤–µ–∂—å–µ —Å–∞—Ñ–∞—Ä–∏',
      distance: '120 –∫–º',
      duration: '2.5 —á–∞—Å–∞',
      stops: ['–ü—Ä–∏—á–∞–ª', '–ë—É—Ö—Ç–∞ –†—É—Å—Å–∫–∞—è'],
      price: 2000,
      status: 'active',
      weatherDependent: false,
    },
  ];

  const mockVehicles = [
    {
      id: '1',
      type: '–ê–≤—Ç–æ–±—É—Å',
      model: '–ü–ê–ó-4234',
      capacity: 25,
      licensePlate: '–ê123–ë–í 41',
      driver: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
      status: 'active',
      lastService: '2024-01-10',
      nextService: '2024-02-10',
    },
    {
      id: '2',
      type: '–ú–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å',
      model: '–ì–ê–ó–µ–ª—å Next',
      capacity: 12,
      licensePlate: '–í456–ì–î 41',
      driver: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
      status: 'maintenance',
      lastService: '2024-01-15',
      nextService: '2024-01-20',
    },
    {
      id: '3',
      type: '–í–µ—Ä—Ç–æ–ª–µ—Ç',
      model: '–ú–∏-8',
      capacity: 8,
      licensePlate: 'RA-12345',
      driver: '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤',
      status: 'active',
      lastService: '2024-01-12',
      nextService: '2024-02-12',
    },
  ];

  const mockDrivers = [
    {
      id: '1',
      name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
      license: 'A1234567890',
      experience: '8 –ª–µ—Ç',
      rating: 4.9,
      routes: ['–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫ - –î–æ–ª–∏–Ω–∞ –≥–µ–π–∑–µ—Ä–æ–≤', '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫ - –ê–≤–∞—á–∏–Ω—Å–∫–∏–π –≤—É–ª–∫–∞–Ω'],
      status: 'active',
      phone: '+7 (999) 123-45-67',
    },
    {
      id: '2',
      name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
      license: 'B2345678901',
      experience: '5 –ª–µ—Ç',
      rating: 4.8,
      routes: ['–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫ - –ú–µ–¥–≤–µ–∂—å–µ —Å–∞—Ñ–∞—Ä–∏'],
      status: 'on_leave',
      phone: '+7 (999) 234-56-78',
    },
    {
      id: '3',
      name: '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤',
      license: 'C3456789012',
      experience: '12 –ª–µ—Ç',
      rating: 4.9,
      routes: ['–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫ - –î–æ–ª–∏–Ω–∞ –≥–µ–π–∑–µ—Ä–æ–≤', '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫ - –ú–µ–¥–≤–µ–∂—å–µ —Å–∞—Ñ–∞—Ä–∏'],
      status: 'active',
      phone: '+7 (999) 345-67-89',
    },
  ];

  const mockBookings = [
    {
      id: '1',
      route: '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫ - –î–æ–ª–∏–Ω–∞ –≥–µ–π–∑–µ—Ä–æ–≤',
      date: '2024-01-15',
      time: '09:00',
      passengers: 12,
      vehicle: '–ü–ê–ó-4234',
      driver: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
      total: 30000,
      status: 'confirmed',
    },
    {
      id: '2',
      route: '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫ - –ê–≤–∞—á–∏–Ω—Å–∫–∏–π –≤—É–ª–∫–∞–Ω',
      date: '2024-01-16',
      time: '07:00',
      passengers: 8,
      vehicle: '–ì–ê–ó–µ–ª—å Next',
      driver: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
      total: 12000,
      status: 'pending',
    },
    {
      id: '3',
      route: '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫ - –ú–µ–¥–≤–µ–∂—å–µ —Å–∞—Ñ–∞—Ä–∏',
      date: '2024-01-17',
      time: '06:00',
      passengers: 6,
      vehicle: '–ú–∏-8',
      driver: '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤',
      total: 12000,
      status: 'confirmed',
    },
  ];

  if (loading) {
    return (
      <div className="min-h-screen bg-premium-black flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-premium-gold border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-white text-lg">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-premium-black">
      {/* Header */}
      <div className="bg-gradient-to-r from-premium-black to-premium-gold/10 border-b border-premium-gold/20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-white">–ü–∞–Ω–µ–ª—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤</h1>
              <p className="text-white/70 mt-1">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º</p>
            </div>
            <div className="flex items-center space-x-4">
              <div className="text-right">
                <div className="text-white text-sm">–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤</div>
                <div className="text-premium-gold text-lg font-bold">{mockRoutes.length}</div>
              </div>
              {weather && (
                <div className="text-right">
                  <div className="flex items-center space-x-2">
                    <span className="text-2xl">üå§Ô∏è</span>
                    <span className="text-white text-lg font-bold">{weather.temperature}¬∞C</span>
                  </div>
                  <p className="text-white/70 text-sm">{weather.location}</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div className="flex space-x-1 bg-white/5 rounded-xl p-1 mb-8">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              onClick={() => setSelectedTab(tab.id)}
              className={`flex-1 flex items-center justify-center space-x-2 py-3 px-4 rounded-lg transition-colors ${
                selectedTab === tab.id
                  ? 'bg-premium-gold text-premium-black'
                  : 'text-white/70 hover:text-white hover:bg-white/10'
              }`}
            >
              <span className="text-lg">{tab.icon}</span>
              <span className="font-medium">{tab.name}</span>
            </button>
          ))}
        </div>

        {/* Search Tab */}
        {selectedTab === 'search' && (
          <div className="space-y-6">
            <TransferSearchWidget 
              onSearchResults={setTransferResults}
              className="w-full"
            />
          </div>
        )}

        {/* Routes Tab */}
        {selectedTab === 'routes' && (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h3 className="text-2xl font-bold text-white">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏</h3>
              <button className="px-6 py-3 bg-premium-gold text-premium-black rounded-xl hover:bg-premium-gold/90 transition-colors font-bold">
                + –°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç
              </button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {mockRoutes.map((route) => (
                <div key={route.id} className="bg-white/5 rounded-2xl p-6 border border-white/10">
                  <div className="flex items-start justify-between mb-4">
                    <h4 className="text-lg font-bold text-white">{route.name}</h4>
                    <span className={`px-3 py-1 rounded-full text-xs font-bold ${
                      route.status === 'active' 
                        ? 'bg-green-500/20 text-green-400' 
                        : 'bg-yellow-500/20 text-yellow-400'
                    }`}>
                      {route.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                    </span>
                  </div>
                  
                  <div className="space-y-2 mb-4">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-white/70">–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</span>
                      <span className="text-white">{route.distance}</span>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-white/70">–í—Ä–µ–º—è –≤ –ø—É—Ç–∏:</span>
                      <span className="text-white">{route.duration}</span>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-white/70">–¶–µ–Ω–∞:</span>
                      <span className="text-premium-gold font-bold">{route.price.toLocaleString()}‚ÇΩ</span>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-white/70">–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ–≥–æ–¥—ã:</span>
                      <span className={route.weatherDependent ? 'text-yellow-400' : 'text-green-400'}>
                        {route.weatherDependent ? '–î–∞' : '–ù–µ—Ç'}
                      </span>
                    </div>
                  </div>
                  
                  <div className="mb-4">
                    <p className="text-white/70 text-sm mb-2">–û—Å—Ç–∞–Ω–æ–≤–∫–∏:</p>
                    <div className="space-y-1">
                      {route.stops.map((stop, index) => (
                        <div key={index} className="text-white text-sm">‚Ä¢ {stop}</div>
                      ))}
                    </div>
                  </div>
                  
                  <div className="flex space-x-2">
                    <button className="flex-1 px-4 py-2 bg-white/10 text-white rounded-lg hover:bg-white/20 transition-colors text-sm">
                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button className="flex-1 px-4 py-2 bg-premium-gold text-premium-black rounded-lg hover:bg-premium-gold/90 transition-colors text-sm font-bold">
                      –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Vehicles Tab */}
        {selectedTab === 'vehicles' && (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h3 className="text-2xl font-bold text-white">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º</h3>
              <button className="px-6 py-3 bg-premium-gold text-premium-black rounded-xl hover:bg-premium-gold/90 transition-colors font-bold">
                + –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
              </button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {mockVehicles.map((vehicle) => (
                <div key={vehicle.id} className="bg-white/5 rounded-2xl p-6 border border-white/10">
                  <div className="flex items-start justify-between mb-4">
                    <h4 className="text-lg font-bold text-white">{vehicle.model}</h4>
                    <span className={`px-3 py-1 rounded-full text-xs font-bold ${
                      vehicle.status === 'active' 
                        ? 'bg-green-500/20 text-green-400' 
                        : 'bg-yellow-500/20 text-yellow-400'
                    }`}>
                      {vehicle.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏'}
                    </span>
                  </div>
                  
                  <div className="space-y-2 mb-4">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-white/70">–¢–∏–ø:</span>
                      <span className="text-white">{vehicle.type}</span>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-white/70">–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</span>
                      <span className="text-white">{vehicle.capacity} –º–µ—Å—Ç</span>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-white/70">–ù–æ–º–µ—Ä:</span>
                      <span className="text-white">{vehicle.licensePlate}</span>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-white/70">–í–æ–¥–∏—Ç–µ–ª—å:</span>
                      <span className="text-white">{vehicle.driver}</span>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-white/70">–°–ª–µ–¥—É—é—â–µ–µ –¢–û:</span>
                      <span className="text-white">{vehicle.nextService}</span>
                    </div>
                  </div>
                  
                  <div className="flex space-x-2">
                    <button className="flex-1 px-4 py-2 bg-white/10 text-white rounded-lg hover:bg-white/20 transition-colors text-sm">
                      –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                    </button>
                    <button className="flex-1 px-4 py-2 bg-premium-gold text-premium-black rounded-lg hover:bg-premium-gold/90 transition-colors text-sm font-bold">
                      –¢–û
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Drivers Tab */}
        {selectedTab === 'drivers' && (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h3 className="text-2xl font-bold text-white">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏</h3>
              <button className="px-6 py-3 bg-premium-gold text-premium-black rounded-xl hover:bg-premium-gold/90 transition-colors font-bold">
                + –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è
              </button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {mockDrivers.map((driver) => (
                <div key={driver.id} className="bg-white/5 rounded-2xl p-6 border border-white/10">
                  <div className="flex items-start justify-between mb-4">
                    <h4 className="text-lg font-bold text-white">{driver.name}</h4>
                    <span className={`px-3 py-1 rounded-full text-xs font-bold ${
                      driver.status === 'active' 
                        ? 'bg-green-500/20 text-green-400' 
                        : 'bg-yellow-500/20 text-yellow-400'
                    }`}>
                      {driver.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–í –æ—Ç–ø—É—Å–∫–µ'}
                    </span>
                  </div>
                  
                  <div className="space-y-2 mb-4">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-white/70">–û–ø—ã—Ç:</span>
                      <span className="text-white">{driver.experience}</span>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-white/70">–†–µ–π—Ç–∏–Ω–≥:</span>
                      <span className="text-white">{driver.rating} ‚≠ê</span>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-white/70">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
                      <span className="text-white">{driver.phone}</span>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-white/70">–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ:</span>
                      <span className="text-white">{driver.license}</span>
                    </div>
                  </div>
                  
                  <div className="mb-4">
                    <p className="text-white/70 text-sm mb-2">–ú–∞—Ä—à—Ä—É—Ç—ã:</p>
                    <div className="space-y-1">
                      {driver.routes.map((route, index) => (
                        <div key={index} className="text-white text-sm">‚Ä¢ {route}</div>
                      ))}
                    </div>
                  </div>
                  
                  <div className="flex space-x-2">
                    <button className="flex-1 px-4 py-2 bg-white/10 text-white rounded-lg hover:bg-white/20 transition-colors text-sm">
                      –ü—Ä–æ—Ñ–∏–ª—å
                    </button>
                    <button className="flex-1 px-4 py-2 bg-premium-gold text-premium-black rounded-lg hover:bg-premium-gold/90 transition-colors text-sm font-bold">
                      –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Bookings Tab */}
        {selectedTab === 'bookings' && (
          <div className="space-y-6">
            <h3 className="text-2xl font-bold text-white">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏</h3>
            
            <div className="bg-white/5 rounded-2xl p-6 border border-white/10">
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-white/10">
                      <th className="text-left py-3 px-4 text-white/70">–ú–∞—Ä—à—Ä—É—Ç</th>
                      <th className="text-left py-3 px-4 text-white/70">–î–∞—Ç–∞/–í—Ä–µ–º—è</th>
                      <th className="text-left py-3 px-4 text-white/70">–ü–∞—Å—Å–∞–∂–∏—Ä—ã</th>
                      <th className="text-left py-3 px-4 text-white/70">–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</th>
                      <th className="text-left py-3 px-4 text-white/70">–í–æ–¥–∏—Ç–µ–ª—å</th>
                      <th className="text-left py-3 px-4 text-white/70">–°—É–º–º–∞</th>
                      <th className="text-left py-3 px-4 text-white/70">–°—Ç–∞—Ç—É—Å</th>
                    </tr>
                  </thead>
                  <tbody>
                    {mockBookings.map((booking) => (
                      <tr key={booking.id} className="border-b border-white/5">
                        <td className="py-3 px-4 text-white">{booking.route}</td>
                        <td className="py-3 px-4 text-white/70">{booking.date} {booking.time}</td>
                        <td className="py-3 px-4 text-white/70">{booking.passengers}</td>
                        <td className="py-3 px-4 text-white/70">{booking.vehicle}</td>
                        <td className="py-3 px-4 text-white/70">{booking.driver}</td>
                        <td className="py-3 px-4 text-premium-gold font-bold">{booking.total.toLocaleString()}‚ÇΩ</td>
                        <td className="py-3 px-4">
                          <span className={`px-3 py-1 rounded-full text-xs font-bold ${
                            booking.status === 'confirmed' 
                              ? 'bg-green-500/20 text-green-400' 
                              : 'bg-yellow-500/20 text-yellow-400'
                          }`}>
                            {booking.status === 'confirmed' ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : '–û–∂–∏–¥–∞–µ—Ç'}
                          </span>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}

        {/* Analytics Tab */}
        {selectedTab === 'analytics' && (
          <div className="space-y-6">
            <h3 className="text-2xl font-bold text-white">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="bg-white/5 rounded-2xl p-6 border border-white/10">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-white/70 text-sm">–í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤</p>
                    <p className="text-3xl font-bold text-white">{mockRoutes.length}</p>
                  </div>
                  <div className="text-3xl">üó∫Ô∏è</div>
                </div>
              </div>
              
              <div className="bg-white/5 rounded-2xl p-6 border border-white/10">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-white/70 text-sm">–ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</p>
                    <p className="text-3xl font-bold text-white">{mockBookings.length}</p>
                  </div>
                  <div className="text-3xl">üé´</div>
                </div>
              </div>
              
              <div className="bg-white/5 rounded-2xl p-6 border border-white/10">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-white/70 text-sm">–î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü</p>
                    <p className="text-3xl font-bold text-white">54000‚ÇΩ</p>
                  </div>
                  <div className="text-3xl">üí∞</div>
                </div>
              </div>
              
              <div className="bg-white/5 rounded-2xl p-6 border border-white/10">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-white/70 text-sm">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞</p>
                    <p className="text-3xl font-bold text-white">85%</p>
                  </div>
                  <div className="text-3xl">üìä</div>
                </div>
              </div>
            </div>
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="bg-white/5 rounded-2xl p-6 border border-white/10">
                <h4 className="text-lg font-bold text-white mb-4">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã</h4>
                <div className="space-y-3">
                  {mockRoutes.map((route, index) => (
                    <div key={route.id} className="flex items-center justify-between">
                      <span className="text-white/70">{route.name}</span>
                      <div className="flex items-center space-x-3">
                        <div className="w-24 bg-white/10 rounded-full h-2">
                          <div 
                            className="bg-premium-gold h-2 rounded-full" 
                            style={{ width: `${Math.random() * 100}%` }}
                          ></div>
                        </div>
                        <span className="text-premium-gold font-bold w-12 text-right">
                          {Math.floor(Math.random() * 50 + 10)}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              
              <div className="bg-white/5 rounded-2xl p-6 border border-white/10">
                <h4 className="text-lg font-bold text-white mb-4">–î–æ—Ö–æ–¥—ã –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º</h4>
                <div className="space-y-3">
                  {mockRoutes.map((route, index) => (
                    <div key={route.id} className="flex items-center justify-between">
                      <span className="text-white/70">{route.name}</span>
                      <div className="flex items-center space-x-3">
                        <div className="w-24 bg-white/10 rounded-full h-2">
                          <div 
                            className="bg-premium-gold h-2 rounded-full" 
                            style={{ width: `${Math.random() * 100}%` }}
                          ></div>
                        </div>
                        <span className="text-premium-gold font-bold w-20 text-right">
                          {Math.floor(Math.random() * 20000 + 5000).toLocaleString()}‚ÇΩ
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}