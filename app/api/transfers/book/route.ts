import { NextRequest, NextResponse } from 'next/server';
import { query } from '@/lib/database';
import { TransferBookingRequest, TransferBookingResponse } from '@/types/transfer';
import { config } from '@/lib/config';
import { smsService } from '@/lib/notifications/sms';
import { emailService } from '@/lib/notifications/email';
import { telegramService } from '@/lib/notifications/telegram';
import { transferPayments } from '@/lib/payments/transfer-payments';
import { matchingEngine } from '@/lib/transfers/matching';
import { createBookingWithLock } from '@/lib/transfers/booking';

export const dynamic = 'force-dynamic';

// POST /api/transfers/book - –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ (THREAD-SAFE)
export async function POST(request: NextRequest) {
  try {
    const body: TransferBookingRequest = await request.json();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!body.scheduleId || !body.passengersCount || !body.contactInfo) {
      return NextResponse.json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: scheduleId, passengersCount, contactInfo'
      }, { status: 400 });
    }

    if (body.passengersCount < 1 || body.passengersCount > 50) {
      return NextResponse.json({
        success: false,
        error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50'
      }, { status: 400 });
    }

    if (!body.contactInfo.phone || !body.contactInfo.email) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏ email'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    if (!body.fromCoordinates || !body.toCoordinates || !body.departureDate) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π'
      }, { status: 400 });
    }

    try {
      // 1. –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ï –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –í–û–î–ò–¢–ï–õ–ï–ô
      const matchingCriteria = {
        vehicleType: body.vehicleType,
        capacity: body.passengersCount,
        features: body.features || [],
        languages: body.languages || ['ru'],
        maxDistance: 10000, // 10 –∫–º
        maxPrice: body.budgetMax || 10000,
        minRating: 4.0,
        workingHours: {
          start: '06:00',
          end: '23:00'
        }
      };

      const matchingResult = await matchingEngine.findBestDrivers(body, matchingCriteria);
      
      if (!matchingResult.success || matchingResult.drivers.length === 0) {
        return NextResponse.json({
          success: false,
          error: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞'
        }, { status: 404 });
      }

      // –ë–µ—Ä–µ–º –ª—É—á—à–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
      const bestDriver = matchingResult.drivers[0];
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
      const scheduleQuery = `
        SELECT s.*, r.*, v.*, d.*, o.name as operator_name, o.phone as operator_phone, o.email as operator_email
        FROM transfer_schedules s
        JOIN transfer_routes r ON s.route_id = r.id
        JOIN transfer_vehicles v ON s.vehicle_id = v.id
        JOIN transfer_drivers d ON s.driver_id = d.id
        JOIN operators o ON v.operator_id = o.id
        WHERE s.id = $1 AND s.is_active = true AND d.id = $2
      `;

      const scheduleResult = await query(scheduleQuery, [body.scheduleId, bestDriver.driverId]);

      if (scheduleResult.rows.length === 0) {
        return NextResponse.json({
          success: false,
          error: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        }, { status: 404 });
      }

      const schedule = scheduleResult.rows[0];

      // üîí –ë–ï–ó–û–ü–ê–°–ù–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –° –¢–†–ê–ù–ó–ê–ö–¶–ò–û–ù–ù–´–ú–ò –ë–õ–û–ö–ò–†–û–í–ö–ê–ú–ò
      // –ó–∞—â–∏—Ç–∞ –æ—Ç race conditions –∏ overbooking
      const bookingResult = await createBookingWithLock({
        scheduleId: body.scheduleId,
        passengersCount: body.passengersCount,
        userId: 'user_123', // TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
        contactInfo: body.contactInfo,
        specialRequests: body.specialRequests
      });

      if (!bookingResult.success) {
        return NextResponse.json({
          success: false,
          error: bookingResult.error,
          errorCode: bookingResult.errorCode
        }, { 
          status: bookingResult.errorCode === 'INSUFFICIENT_SEATS' ? 400 : 
                 bookingResult.errorCode === 'LOCK_TIMEOUT' ? 409 : 500
        });
      }

      const booking = bookingResult.booking;

      // 2. –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê
      const paymentRequest = {
        bookingId: booking.id,
        amount: parseFloat(booking.total_price),
        currency: 'RUB',
        paymentMethod: 'card' as const,
        customerInfo: {
          email: body.contactInfo.email,
          phone: body.contactInfo.phone,
          name: body.contactInfo.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        },
        description: `–û–ø–ª–∞—Ç–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ ${booking.scheduleInfo.fromLocation} ‚Üí ${booking.scheduleInfo.toLocation}`
      };

      const paymentResult = await transferPayments.createPayment(paymentRequest);
      
      if (!paymentResult.success) {
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–ª–∞—Ç–µ–∂–∞
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–º–µ–Ω—ã
        const { cancelBooking } = await import('@/lib/transfers/booking');
        await cancelBooking(booking.id, 'Payment creation failed');
        
        return NextResponse.json({
          success: false,
          error: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ${paymentResult.error}`
        }, { status: 500 });
      }

      // –ú–µ—Å—Ç–∞ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ createBookingWithLock
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ –≤ createBookingWithLock

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await sendRealBookingNotifications(booking, schedule, schedule, body.contactInfo);

      const response: TransferBookingResponse = {
        success: true,
        data: {
          bookingId: booking.id,
          status: booking.status,
          confirmationCode: booking.confirmation_code,
          totalPrice: parseFloat(booking.total_price),
          bookingDetails: {
            id: booking.id,
            userId: booking.user_id,
            operatorId: booking.operator_id,
            routeId: booking.route_id,
            vehicleId: booking.vehicle_id,
            driverId: booking.driver_id,
            scheduleId: booking.schedule_id,
            bookingDate: booking.booking_date,
            departureTime: booking.departure_time,
            passengersCount: booking.passengers_count,
            totalPrice: parseFloat(booking.total_price),
            status: booking.status,
            specialRequests: booking.special_requests,
            contactPhone: booking.contact_phone,
            contactEmail: booking.contact_email,
            confirmationCode: booking.confirmation_code,
            createdAt: new Date(booking.created_at),
            updatedAt: new Date(booking.updated_at)
          }
        }
      };

      return NextResponse.json(response);

    } catch (dbError) {
      console.error('Database error:', dbError);
      
      // Fallback –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
      const mockBooking = createMockBooking(body);
      
      const response: TransferBookingResponse = {
        success: true,
        data: {
          bookingId: mockBooking.id,
          status: mockBooking.status,
          confirmationCode: mockBooking.confirmationCode,
          totalPrice: mockBooking.totalPrice,
          bookingDetails: mockBooking
        }
      };

      return NextResponse.json(response);
    }

  } catch (error) {
    console.error('Error in transfer booking:', error);
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'
    }, { status: 500 });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
function generateConfirmationCode(): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  for (let i = 0; i < 6; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function sendRealBookingNotifications(
  booking: any, 
  schedule: any, 
  driver: any,
  contactInfo: any
): Promise<void> {
  try {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä—É
    if (contactInfo.phone) {
      await smsService.sendBookingConfirmation(contactInfo.phone, {
        confirmationCode: booking.confirmation_code,
        route: `${schedule.from_location} ‚Üí ${schedule.to_location}`,
        date: schedule.departure_date,
        time: schedule.departure_time,
        driverName: driver.name,
        driverPhone: driver.phone
      });
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä—É
    if (contactInfo.email) {
      await emailService.sendBookingConfirmation(contactInfo.email, {
        id: booking.id,
        confirmationCode: booking.confirmation_code,
        route: `${schedule.from_location} ‚Üí ${schedule.to_location}`,
        date: schedule.departure_date,
        time: schedule.departure_time,
        passengers: booking.passengers_count,
        price: parseFloat(booking.total_price),
        driverName: driver.name,
        driverPhone: driver.phone,
        meetingPoint: schedule.meeting_point || '–£—Ç–æ—á–Ω–∏—Ç–µ —É –≤–æ–¥–∏—Ç–µ–ª—è'
      });
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—é
    if (driver.telegram_chat_id) {
      await telegramService.sendDriverNotification(driver.telegram_chat_id, {
        id: booking.id,
        route: `${schedule.from_location} ‚Üí ${schedule.to_location}`,
        date: schedule.departure_date,
        time: schedule.departure_time,
        passengers: booking.passengers_count,
        price: parseFloat(booking.total_price),
        passengerName: contactInfo.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        passengerPhone: contactInfo.phone,
        meetingPoint: schedule.meeting_point || '–£—Ç–æ—á–Ω–∏—Ç–µ —É –ø–∞—Å—Å–∞–∂–∏—Ä–∞'
      });
    }

    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:', {
      bookingId: booking.id,
      smsSent: !!contactInfo.phone,
      emailSent: !!contactInfo.email,
      telegramSent: !!driver.telegram_chat_id
    });

  } catch (error) {
    console.error('Error sending real notifications:', error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
function createMockBooking(request: TransferBookingRequest): any {
  const confirmationCode = generateConfirmationCode();
  const totalPrice = 1500 * request.passengersCount; // –ó–∞–≥–ª—É—à–∫–∞ —Ü–µ–Ω—ã

  return {
    id: `booking_${Date.now()}`,
    userId: 'user_123',
    operatorId: 'operator_1',
    routeId: 'route_1',
    vehicleId: 'vehicle_1',
    driverId: 'driver_1',
    scheduleId: request.scheduleId,
    bookingDate: new Date().toISOString().split('T')[0],
    departureTime: '08:00',
    passengersCount: request.passengersCount,
    totalPrice: totalPrice,
    status: 'pending',
    specialRequests: request.specialRequests,
    contactPhone: request.contactInfo.phone,
    contactEmail: request.contactInfo.email,
    confirmationCode: confirmationCode,
    createdAt: new Date(),
    updatedAt: new Date()
  };
}