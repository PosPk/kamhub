/**
 * API Endpoint: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ –ö–∞–º—á–∞—Ç–∫—É
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (AI)
 * - –ü–æ–¥–±–æ—Ä —Ç—É—Ä–æ–≤ –∏–∑ –ë–î
 * - –ü–æ–¥–±–æ—Ä —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–∑ –ë–î
 * - –ü–æ–¥–±–æ—Ä —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤ –∏–∑ –ë–î
 * - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —Å –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π
 * - –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
 */

import { NextRequest, NextResponse } from 'next/server';
import { query } from '@/lib/database';
import { config } from '@/lib/config';

export const dynamic = 'force-dynamic';
export const maxDuration = 60; // 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

// –¢–∏–ø—ã
interface TripRequest {
  query: string; // –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  days: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
  budget?: number; // –ë—é–¥–∂–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  interests?: string[]; // –ò–Ω—Ç–µ—Ä–µ—Å—ã: ['hiking', 'wildlife', 'culture', 'adventure', 'relaxation']
  groupSize?: number; // –†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã
  startDate?: string; // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD)
}

interface TourCard {
  id: string;
  name: string;
  description: string;
  duration: number; // —á–∞—Å—ã
  price: number;
  difficulty: string;
  operator_id: string;
  rating: number;
  coordinates: any[];
}

interface AccommodationCard {
  id: string;
  name: string;
  type: string;
  address: string;
  price_per_night: number;
  rating: number;
  amenities: string[];
  coordinates: { lat: number; lng: number };
}

interface TransferCard {
  id: string;
  route_name: string;
  from_location: string;
  to_location: string;
  distance_km: number;
  duration_minutes: number;
  price_per_person: number;
  vehicle_type: string;
}

interface DayPlan {
  day: number;
  date?: string;
  activities: {
    time: string;
    type: 'tour' | 'transfer' | 'accommodation' | 'free_time' | 'meal';
    card_id?: string;
    title: string;
    description: string;
    duration?: number;
    price?: number;
    logistics?: {
      transport: 'walk' | 'car' | 'bus' | 'taxi' | 'transfer';
      duration_minutes: number;
      distance_km?: number;
      notes?: string;
    };
  }[];
  accommodation?: AccommodationCard;
  total_cost: number;
}

interface TripPlan {
  summary: {
    total_days: number;
    total_cost: number;
    highlights: string[];
    difficulty_level: 'easy' | 'medium' | 'hard' | 'mixed';
  };
  days: DayPlan[];
  tours: TourCard[];
  accommodations: AccommodationCard[];
  transfers: TransferCard[];
  recommendations: string[];
  important_notes: string[];
}

/**
 * POST /api/trip/plan
 * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ –ö–∞–º—á–∞—Ç–∫—É
 */
export async function POST(request: NextRequest) {
  try {
    const body: TripRequest = await request.json();
    
    if (!body.query || !body.days || body.days < 1 || body.days > 30) {
      return NextResponse.json({
        success: false,
        error: 'Invalid request. Please provide query and days (1-30).',
      }, { status: 400 });
    }

    console.log('üéØ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏:', { query: body.query, days: body.days });

    // –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ AI
    const userIntent = await analyzeUserIntent(body.query, body);

    // –®–∞–≥ 2: –ü–æ–¥–±–æ—Ä —Ç—É—Ä–æ–≤ –∏–∑ –ë–î
    const tours = await selectTours(userIntent, body.days, body.budget);

    // –®–∞–≥ 3: –ü–æ–¥–±–æ—Ä —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–∑ –ë–î
    const accommodations = await selectAccommodations(body.days, body.budget, body.groupSize);

    // –®–∞–≥ 4: –ü–æ–¥–±–æ—Ä —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤ –∏–∑ –ë–î
    const transfers = await selectTransfers(tours, accommodations);

    // –®–∞–≥ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ AI
    const tripPlan = await generateTripPlan(
      body,
      userIntent,
      tours,
      accommodations,
      transfers
    );

    return NextResponse.json({
      success: true,
      data: tripPlan,
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏:', error);
    return NextResponse.json({
      success: false,
      error: 'Failed to plan trip',
      message: error instanceof Error ? error.message : 'Unknown error',
    }, { status: 500 });
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ AI
 */
async function analyzeUserIntent(query: string, request: TripRequest): Promise<any> {
  const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç—É—Ä–∏–∑–º—É –Ω–∞ –ö–∞–º—á–∞—Ç–∫–µ. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ–∫–∏:
1. –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–≤—É–ª–∫–∞–Ω—ã, –º–µ–¥–≤–µ–¥–∏, —Ä—ã–±–∞–ª–∫–∞, —Ç–µ—Ä–º–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∫—É–ª—å—Ç—É—Ä–∞, –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö)
2. –£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ (–ª–µ–≥–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, —Å–ª–æ–∂–Ω—ã–π)
3. –¢–∏–ø –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ (–æ–¥–∏–Ω–æ—á–∫–∞, –ø–∞—Ä–∞, —Å–µ–º—å—è, –≥—Ä—É–ø–ø–∞)
4. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã (–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, –∫–æ–º—Ñ–æ—Ä—Ç, –±—é–¥–∂–µ—Ç, —ç–∫–æ–ª–æ–≥–∏—è, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è)

–í–µ—Ä–Ω–∏ JSON:
{
  "interests": ["hiking", "wildlife", "photography"],
  "difficulty": "medium",
  "traveler_type": "couple",
  "priorities": ["adventure", "nature"],
  "must_see": ["–ö–ª—é—á–µ–≤—Å–∫–∞—è —Å–æ–ø–∫–∞", "–î–æ–ª–∏–Ω–∞ –≥–µ–π–∑–µ—Ä–æ–≤"],
  "avoid": ["crowds"]
}`;

  const aiResponse = await callAI(systemPrompt, `–ó–∞–ø—Ä–æ—Å: ${query}\n–î–Ω–µ–π: ${request.days}`);
  
  try {
    return JSON.parse(aiResponse);
  } catch {
    // Fallback –µ—Å–ª–∏ AI –≤–µ—Ä–Ω—É–ª –Ω–µ JSON
    return {
      interests: request.interests || ['nature', 'adventure'],
      difficulty: 'medium',
      traveler_type: 'group',
      priorities: ['adventure'],
      must_see: [],
      avoid: []
    };
  }
}

/**
 * –ü–æ–¥–±–æ—Ä —Ç—É—Ä–æ–≤ –∏–∑ –ë–î
 */
async function selectTours(
  userIntent: any,
  days: number,
  budget?: number
): Promise<TourCard[]> {
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ç—É—Ä–æ–≤
    const difficultyMap: Record<string, string[]> = {
      'easy': ['easy'],
      'medium': ['easy', 'medium'],
      'hard': ['easy', 'medium', 'hard']
    };
    
    const allowedDifficulty = difficultyMap[userIntent.difficulty] || ['easy', 'medium'];
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –Ω–∞ —Ç—É—Ä—ã (80% –≤—Ä–µ–º–µ–Ω–∏)
    const totalHoursAvailable = days * 24 * 0.8;
    
    const sql = `
      SELECT 
        id,
        name,
        short_description as description,
        duration,
        price,
        difficulty,
        operator_id,
        rating,
        coordinates,
        season
      FROM tours
      WHERE 
        is_active = true
        AND difficulty = ANY($1)
        ${budget ? 'AND price <= $2' : ''}
        AND rating >= 3.5
      ORDER BY 
        rating DESC,
        review_count DESC
      LIMIT 15
    `;
    
    const params = budget ? [allowedDifficulty, budget * 0.3] : [allowedDifficulty];
    const result = await query(sql, params);
    
    return result.rows.map(row => ({
      id: row.id,
      name: row.name,
      description: row.description || '',
      duration: row.duration,
      price: parseFloat(row.price),
      difficulty: row.difficulty,
      operator_id: row.operator_id,
      rating: parseFloat(row.rating),
      coordinates: row.coordinates || []
    }));
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞ —Ç—É—Ä–æ–≤:', error);
    return [];
  }
}

/**
 * –ü–æ–¥–±–æ—Ä —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–∑ –ë–î
 */
async function selectAccommodations(
  days: number,
  budget?: number,
  groupSize: number = 2
): Promise<AccommodationCard[]> {
  try {
    const sql = `
      SELECT 
        a.id,
        a.name,
        a.type,
        a.address,
        a.price_per_night_from as price_per_night,
        a.rating,
        a.amenities,
        a.coordinates
      FROM accommodations a
      WHERE 
        a.is_active = true
        ${budget ? 'AND a.price_per_night_from <= $1' : ''}
        AND a.rating >= 3.5
      ORDER BY 
        a.rating DESC,
        a.price_per_night_from ASC
      LIMIT 10
    `;
    
    const params = budget ? [budget / days] : [];
    const result = await query(sql, params);
    
    return result.rows.map(row => ({
      id: row.id,
      name: row.name,
      type: row.type,
      address: row.address,
      price_per_night: parseFloat(row.price_per_night),
      rating: parseFloat(row.rating),
      amenities: row.amenities || [],
      coordinates: row.coordinates || { lat: 53.0, lng: 158.6 }
    }));
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:', error);
    return [];
  }
}

/**
 * –ü–æ–¥–±–æ—Ä —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤ –∏–∑ –ë–î
 */
async function selectTransfers(
  tours: TourCard[],
  accommodations: AccommodationCard[]
): Promise<TransferCard[]> {
  try {
    const sql = `
      SELECT 
        tr.id,
        tr.name as route_name,
        tr.from_location,
        tr.to_location,
        tr.distance_km,
        tr.estimated_duration_minutes as duration_minutes,
        ts.price_per_person,
        tv.vehicle_type
      FROM transfer_routes tr
      LEFT JOIN transfer_schedules ts ON tr.id = ts.route_id
      LEFT JOIN transfer_vehicles tv ON ts.vehicle_id = tv.id
      WHERE 
        tr.is_active = true
        AND ts.is_active = true
      ORDER BY 
        tr.distance_km ASC
      LIMIT 20
    `;
    
    const result = await query(sql, []);
    
    return result.rows.map(row => ({
      id: row.id,
      route_name: row.route_name,
      from_location: row.from_location,
      to_location: row.to_location,
      distance_km: parseFloat(row.distance_km) || 0,
      duration_minutes: row.duration_minutes || 60,
      price_per_person: parseFloat(row.price_per_person) || 0,
      vehicle_type: row.vehicle_type || 'comfort'
    }));
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤:', error);
    return [];
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–æ–µ–∑–¥–∫–∏ —á–µ—Ä–µ–∑ AI
 */
async function generateTripPlan(
  request: TripRequest,
  userIntent: any,
  tours: TourCard[],
  accommodations: AccommodationCard[],
  transfers: TransferCard[]
): Promise<TripPlan> {
  
  const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–µ–∑–¥–æ–∫ –Ω–∞ –ö–∞–º—á–∞—Ç–∫—É. 

–£ —Ç–µ–±—è –µ—Å—Ç—å:
- ${tours.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–æ–≤
- ${accommodations.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
- ${transfers.length} —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤

–°–æ–∑–¥–∞–π –î–ï–¢–ê–õ–¨–ù–´–ô –ø–ª–∞–Ω –Ω–∞ ${request.days} –¥–Ω–µ–π. –î–ª—è –ö–ê–ñ–î–û–ì–û –¥–Ω—è –≤–∫–ª—é—á–∏:
1. –£—Ç—Ä–æ (9:00-12:00): –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Ç—É—Ä—ã
2. –î–µ–Ω—å (12:00-17:00): –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
3. –í–µ—á–µ—Ä (17:00-21:00): –æ—Ç–¥—ã—Ö, —É–∂–∏–Ω
4. –õ–æ–≥–∏—Å—Ç–∏–∫—É –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ (–ø–µ—à–∫–æ–º/—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç/—Ç–∞–∫—Å–∏, –≤—Ä–µ–º—è, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ)
5. –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –Ω–æ—á—å

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û:
- –£–∫–∞–∂–∏ ID —Ç—É—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞: ${tours.map(t => `${t.id}:${t.name}`).join(', ')}
- –£–∫–∞–∂–∏ ID —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: ${accommodations.map(a => `${a.id}:${a.name}`).join(', ')}
- –†–∞—Å—Å—á–∏—Ç–∞–π –ª–æ–≥–∏—Å—Ç–∏–∫—É –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
- –î–∞–π –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–¥—ã—Ö –∏ –ø–µ—Ä–µ–µ–∑–¥—ã
- –£—á–∏—Ç—ã–≤–∞–π –ø–æ–≥–æ–¥—É –ö–∞–º—á–∞—Ç–∫–∏

–í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON:
{
  "summary": {
    "total_days": ${request.days},
    "total_cost": 0,
    "highlights": ["—Ç–æ–ø-3 –º–æ–º–µ–Ω—Ç–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"],
    "difficulty_level": "medium"
  },
  "days": [
    {
      "day": 1,
      "activities": [
        {
          "time": "09:00",
          "type": "transfer",
          "card_id": "transfer-id",
          "title": "–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –∏–∑ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞",
          "description": "...",
          "duration": 60,
          "price": 1500,
          "logistics": {
            "transport": "car",
            "duration_minutes": 60,
            "distance_km": 30,
            "notes": "–í—Å—Ç—Ä–µ—á–∞ —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º"
          }
        },
        {
          "time": "14:00",
          "type": "tour",
          "card_id": "tour-id-from-list",
          "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–∞ –∏–∑ –ë–î",
          "description": "...",
          "duration": 180,
          "price": 5000
        }
      ],
      "accommodation": {"id": "acc-id-from-list"},
      "total_cost": 8500
    }
  ],
  "recommendations": ["–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã"],
  "important_notes": ["–≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"]
}`;

  const userPrompt = `
–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${request.query}
–î–Ω–∏: ${request.days}
–ë—é–¥–∂–µ—Ç: ${request.budget || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
–ò–Ω—Ç–µ—Ä–µ—Å—ã: ${JSON.stringify(userIntent.interests)}

–î–û–°–¢–£–ü–ù–´–ï –¢–£–†–´:
${tours.map(t => `- ${t.id}: ${t.name} (${t.duration}—á, ${t.price}‚ÇΩ, ${t.difficulty})`).join('\n')}

–î–û–°–¢–£–ü–ù–û–ï –†–ê–ó–ú–ï–©–ï–ù–ò–ï:
${accommodations.map(a => `- ${a.id}: ${a.name} (${a.price_per_night}‚ÇΩ/–Ω–æ—á—å, ${a.type})`).join('\n')}

–î–û–°–¢–£–ü–ù–´–ï –¢–†–ê–ù–°–§–ï–†–´:
${transfers.slice(0, 5).map(t => `- ${t.route_name}: ${t.from_location} ‚Üí ${t.to_location} (${t.duration_minutes}–º–∏–Ω, ${t.price_per_person}‚ÇΩ)`).join('\n')}
`;

  const aiResponse = await callAI(systemPrompt, userPrompt);
  
  try {
    const plan = JSON.parse(aiResponse);
    
    // –û–±–æ–≥–∞—â–∞–µ–º –ø–ª–∞–Ω –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
    plan.tours = tours.filter(t => 
      plan.days.some((d: DayPlan) => 
        d.activities.some(a => a.card_id === t.id)
      )
    );
    
    plan.accommodations = accommodations.filter(a =>
      plan.days.some((d: DayPlan) => d.accommodation?.id === a.id)
    );
    
    plan.transfers = transfers.filter(t =>
      plan.days.some((d: DayPlan) =>
        d.activities.some(a => a.card_id === t.id)
      )
    );
    
    return plan;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–ª–∞–Ω–∞:', error);
    
    // Fallback: —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω
    return createFallbackPlan(request, tours, accommodations);
  }
}

/**
 * Fallback –ø–ª–∞–Ω –µ—Å–ª–∏ AI –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
 */
function createFallbackPlan(
  request: TripRequest,
  tours: TourCard[],
  accommodations: AccommodationCard[]
): TripPlan {
  
  const days: DayPlan[] = [];
  let totalCost = 0;
  
  for (let day = 1; day <= request.days; day++) {
    const dayTours = tours.slice(0, 1); // –ë–µ—Ä–µ–º 1 —Ç—É—Ä –≤ –¥–µ–Ω—å
    const accommodation = accommodations[0];
    
    const activities = dayTours.map((tour, idx) => ({
      time: idx === 0 ? '10:00' : '14:00',
      type: 'tour' as const,
      card_id: tour.id,
      title: tour.name,
      description: tour.description,
      duration: tour.duration,
      price: tour.price,
      logistics: {
        transport: 'car' as const,
        duration_minutes: 30,
        distance_km: 15,
        notes: '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –∫ –º–µ—Å—Ç—É –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–∞'
      }
    }));
    
    const dayCost = dayTours.reduce((sum, t) => sum + t.price, 0) + 
                    (accommodation?.price_per_night || 0);
    
    totalCost += dayCost;
    
    days.push({
      day,
      activities,
      accommodation,
      total_cost: dayCost
    });
  }
  
  return {
    summary: {
      total_days: request.days,
      total_cost: totalCost,
      highlights: [
        '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –≤—É–ª–∫–∞–Ω–∞–º–∏ –ö–∞–º—á–∞—Ç–∫–∏',
        '–ü–æ—Å–µ—â–µ–Ω–∏–µ –ø—Ä–∏—Ä–æ–¥–Ω—ã—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π',
        '–ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ'
      ],
      difficulty_level: 'medium'
    },
    days,
    tours,
    accommodations: accommodations.slice(0, 1),
    transfers: [],
    recommendations: [
      '–í–æ–∑—å–º–∏—Ç–µ —Ç–µ–ø–ª—É—é –æ–¥–µ–∂–¥—É - –ø–æ–≥–æ–¥–∞ –∏–∑–º–µ–Ω—á–∏–≤–∞',
      '–ù–æ—Å–∏—Ç–µ —É–¥–æ–±–Ω—É—é –æ–±—É–≤—å –¥–ª—è –ø–æ—Ö–æ–¥–æ–≤',
      '–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç!'
    ],
    important_notes: [
      '–°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –º–µ–¥–≤–µ–∂—å–∏—Ö –∑–æ–Ω–∞—Ö',
      '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π—Ç–µ –≥–∏–¥–∞ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º',
      '–û—Ñ–æ—Ä–º–∏—Ç–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞'
    ]
  };
}

/**
 * –í—ã–∑–æ–≤ AI (GROQ –∏–ª–∏ DeepSeek)
 */
async function callAI(systemPrompt: string, userPrompt: string): Promise<string> {
  // –ü—Ä–æ–±—É–µ–º GROQ
  if (config.ai.groq.apiKey) {
    try {
      const response = await fetch(`${config.ai.groq.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${config.ai.groq.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: config.ai.groq.model,
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
          ],
          max_tokens: config.ai.groq.maxTokens,
          temperature: 0.7,
        }),
      });

      if (response.ok) {
        const data = await response.json();
        return data.choices[0].message.content;
      }
    } catch (error) {
      console.error('GROQ AI error:', error);
    }
  }

  // –ü—Ä–æ–±—É–µ–º DeepSeek
  if (config.ai.deepseek.apiKey) {
    try {
      const response = await fetch(`${config.ai.deepseek.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${config.ai.deepseek.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: config.ai.deepseek.model,
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
          ],
          max_tokens: config.ai.deepseek.maxTokens,
          temperature: 0.7,
        }),
      });

      if (response.ok) {
        const data = await response.json();
        return data.choices[0].message.content;
      }
    } catch (error) {
      console.error('DeepSeek AI error:', error);
    }
  }

  throw new Error('All AI providers unavailable');
}
