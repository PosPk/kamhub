/**
 * Open-Meteo Weather API (FREE!)
 * https://open-meteo.com
 * 
 * –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
 * - –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
 * - –ë–µ–∑ API –∫–ª—é—á–∞
 * - –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
 * - –ë—ã—Å—Ç—Ä—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π
 */

interface OpenMeteoResponse {
  current: {
    temperature_2m: number;
    weathercode: number;
    windspeed_10m: number;
    winddirection_10m: number;
    relativehumidity_2m: number;
  };
  current_units: {
    temperature_2m: string;
    windspeed_10m: string;
  };
}

interface WeatherData {
  temperature: number;
  condition: string;
  weatherCode: number;
  windSpeed: number;
  windDirection: number;
  humidity: number;
  location: string;
}

/**
 * –ú–∞–ø–ø–∏–Ω–≥ WMO Weather Code –≤ –Ω–∞—à–∏ —É—Å–ª–æ–≤–∏—è
 * https://open-meteo.com/en/docs
 */
function mapWeatherCode(code: number): string {
  // Clear sky
  if (code === 0) return 'clear';
  
  // Mainly clear, partly cloudy, and overcast
  if (code >= 1 && code <= 3) return 'partly_cloudy';
  
  // Fog and depositing rime fog
  if (code === 45 || code === 48) return 'fog';
  
  // Drizzle: Light, moderate, and dense intensity
  if (code >= 51 && code <= 55) return 'drizzle';
  
  // Freezing Drizzle: Light and dense intensity
  if (code === 56 || code === 57) return 'drizzle';
  
  // Rain: Slight, moderate and heavy intensity
  if (code >= 61 && code <= 65) return 'rain';
  
  // Freezing Rain: Light and heavy intensity
  if (code === 66 || code === 67) return 'rain';
  
  // Snow fall: Slight, moderate, and heavy intensity
  if (code >= 71 && code <= 75) return 'snow';
  
  // Snow grains
  if (code === 77) return 'snow';
  
  // Rain showers: Slight, moderate, and violent
  if (code >= 80 && code <= 82) return 'rain';
  
  // Snow showers slight and heavy
  if (code === 85 || code === 86) return 'snow';
  
  // Thunderstorm: Slight or moderate
  if (code === 95) return 'thunderstorm';
  
  // Thunderstorm with slight and heavy hail
  if (code === 96 || code === 99) return 'thunderstorm';
  
  return 'mostly_clear';
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É —á–µ—Ä–µ–∑ Open-Meteo API
 */
export async function getWeatherOpenMeteo(
  lat: number,
  lng: number,
  location: string = '–ö–∞–º—á–∞—Ç–∫–∞'
): Promise<WeatherData> {
  try {
    const url = new URL('https://api.open-meteo.com/v1/forecast');
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    url.searchParams.append('latitude', lat.toString());
    url.searchParams.append('longitude', lng.toString());
    url.searchParams.append('current', [
      'temperature_2m',
      'weathercode',
      'windspeed_10m',
      'winddirection_10m',
      'relativehumidity_2m'
    ].join(','));
    url.searchParams.append('timezone', 'auto');
    url.searchParams.append('forecast_days', '1');

    const response = await fetch(url.toString(), {
      next: { revalidate: 1800 } // –ö—ç—à –Ω–∞ 30 –º–∏–Ω—É—Ç
    });

    if (!response.ok) {
      throw new Error(`Open-Meteo API error: ${response.status}`);
    }

    const data: OpenMeteoResponse = await response.json();

    return {
      temperature: Math.round(data.current.temperature_2m),
      condition: mapWeatherCode(data.current.weathercode),
      weatherCode: data.current.weathercode,
      windSpeed: Math.round(data.current.windspeed_10m),
      windDirection: data.current.winddirection_10m,
      humidity: data.current.relativehumidity_2m,
      location
    };
  } catch (error) {
    console.error('Error fetching weather from Open-Meteo:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return {
      temperature: 0,
      condition: 'mostly_clear',
      weatherCode: 2,
      windSpeed: 5,
      windDirection: 180,
      humidity: 60,
      location
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–µ–Ω –ª–∏ —Ä–µ–∂–∏–º "–≤—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–π –ø–µ–ø–µ–ª"
 * –î–ª—è –ö–∞–º—á–∞—Ç–∫–∏: –µ—Å–ª–∏ —Ö–æ–ª–æ–¥–Ω–æ –∏ —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä
 */
export function checkVolcanicAsh(weather: WeatherData, isKamchatka: boolean): boolean {
  if (!isKamchatka) return false;
  
  // –ï—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂–µ 0 –∏ –≤–µ—Ç–µ—Ä > 20 –∫–º/—á
  // –ò –ø–æ–≥–æ–¥–∞ –Ω–µ —Å–æ–≤—Å–µ–º —è—Å–Ω–∞—è
  return (
    weather.temperature < 0 &&
    weather.windSpeed > 20 &&
    weather.condition !== 'clear'
  );
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å emoji –¥–ª—è –ø–æ–≥–æ–¥—ã
 */
export function getWeatherEmoji(condition: string): string {
  const emojiMap: Record<string, string> = {
    clear: '‚òÄÔ∏è',
    mostly_clear: 'üå§Ô∏è',
    partly_cloudy: '‚õÖ',
    overcast: '‚òÅÔ∏è',
    fog: 'üå´Ô∏è',
    drizzle: 'üå¶Ô∏è',
    rain: 'üåßÔ∏è',
    snow: '‚ùÑÔ∏è',
    thunderstorm: '‚õàÔ∏è',
  };
  
  return emojiMap[condition] || 'üå§Ô∏è';
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
 */
export function getWeatherDescription(condition: string): string {
  const descriptionMap: Record<string, string> = {
    clear: '–Ø—Å–Ω–æ',
    mostly_clear: '–í –æ—Å–Ω–æ–≤–Ω–æ–º —è—Å–Ω–æ',
    partly_cloudy: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
    overcast: '–ü–∞—Å–º—É—Ä–Ω–æ',
    fog: '–¢—É–º–∞–Ω',
    drizzle: '–ú–æ—Ä–æ—Å—å',
    rain: '–î–æ–∂–¥—å',
    snow: '–°–Ω–µ–≥',
    thunderstorm: '–ì—Ä–æ–∑–∞',
  };
  
  return descriptionMap[condition] || '–û–±–ª–∞—á–Ω–æ';
}
