/**
 * üîí –ë–ï–ó–û–ü–ê–°–ù–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –¢–†–ê–ù–°–§–ï–†–û–í
 * 
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É race conditions —Å –ø–æ–º–æ—â—å—é:
 * 1. PostgreSQL —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 * 2. SELECT FOR UPDATE NOWAIT –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
 * 3. –ê—Ç–æ–º–∞—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 * 
 * @author Cursor AI Agent
 * @date 2025-10-30
 * @critical –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π –º–æ–¥—É–ª—å - –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –±–µ–∑ review!
 */

import { PoolClient } from 'pg';
import { transaction } from '@/lib/database';

export interface BookingRequest {
  scheduleId: string;
  passengersCount: number;
  userId: string;
  contactInfo: {
    phone: string;
    email: string;
    name?: string;
  };
  specialRequests?: string;
}

export interface BookingResult {
  success: boolean;
  booking?: any;
  error?: string;
  errorCode?: string;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç race conditions
 * 
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 * 1. BEGIN transaction
 * 2. SELECT ... FOR UPDATE NOWAIT - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 * 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Å—Ç
 * 4. UPDATE available_seats (–∞—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
 * 5. INSERT booking
 * 6. COMMIT
 * 
 * –ï—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (NOWAIT)
 */
export async function createBookingWithLock(
  request: BookingRequest
): Promise<BookingResult> {
  try {
    return await transaction(async (client: PoolClient) => {
      // 1. –ë–ª–æ–∫–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      // FOR UPDATE NOWAIT - –Ω–µ –∂–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É —Å—Ä–∞–∑—É
      const lockQuery = `
        SELECT 
          s.id,
          s.available_seats,
          s.price_per_person,
          s.route_id,
          s.vehicle_id,
          s.driver_id,
          s.departure_time,
          r.from_location,
          r.to_location,
          v.operator_id
        FROM transfer_schedules s
        JOIN transfer_routes r ON s.route_id = r.id
        JOIN transfer_vehicles v ON s.vehicle_id = v.id
        WHERE s.id = $1 AND s.is_active = true
        FOR UPDATE NOWAIT
      `;

      let scheduleResult;
      try {
        scheduleResult = await client.query(lockQuery, [request.scheduleId]);
      } catch (error: any) {
        // NOWAIT –≤–µ—Ä–Ω–µ—Ç –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
        if (error.code === '55P03') { // lock_not_available
          return {
            success: false,
            error: '–≠—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ–π—á–∞—Å –±—Ä–æ–Ω–∏—Ä—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            errorCode: 'LOCK_TIMEOUT'
          };
        }
        throw error;
      }

      if (scheduleResult.rows.length === 0) {
        return {
          success: false,
          error: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ',
          errorCode: 'SCHEDULE_NOT_FOUND'
        };
      }

      const schedule = scheduleResult.rows[0];

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Å—Ç
      if (schedule.available_seats < request.passengersCount) {
        return {
          success: false,
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç. –î–æ—Å—Ç—É–ø–Ω–æ: ${schedule.available_seats}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${request.passengersCount}`,
          errorCode: 'INSUFFICIENT_SEATS'
        };
      }

      // 3. –ê—Ç–æ–º–∞—Ä–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º WHERE —É—Å–ª–æ–≤–∏–µ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã
      const updateSeatsQuery = `
        UPDATE transfer_schedules 
        SET 
          available_seats = available_seats - $1,
          updated_at = NOW()
        WHERE id = $2 
          AND available_seats >= $1
          AND is_active = true
        RETURNING available_seats
      `;

      const updateResult = await client.query(updateSeatsQuery, [
        request.passengersCount,
        request.scheduleId
      ]);

      if (updateResult.rowCount === 0) {
        // –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        return {
          success: false,
          error: '–ú–µ—Å—Ç–∞ –±—ã–ª–∏ –∑–∞–Ω—è—Ç—ã –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
          errorCode: 'SEATS_TAKEN'
        };
      }

      const newAvailableSeats = updateResult.rows[0].available_seats;

      // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const confirmationCode = generateConfirmationCode();

      // 5. –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—É
      const totalPrice = parseFloat(schedule.price_per_person) * request.passengersCount;

      // 6. –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      const bookingQuery = `
        INSERT INTO transfer_bookings (
          user_id,
          operator_id,
          route_id,
          vehicle_id,
          driver_id,
          schedule_id,
          booking_date,
          departure_time,
          passengers_count,
          total_price,
          status,
          special_requests,
          contact_phone,
          contact_email,
          confirmation_code,
          created_at,
          updated_at
        ) VALUES (
          $1, $2, $3, $4, $5, $6, $7, $8, $9, $10,
          'pending', $11, $12, $13, $14, NOW(), NOW()
        )
        RETURNING *
      `;

      const bookingDate = new Date().toISOString().split('T')[0];

      const bookingResult = await client.query(bookingQuery, [
        request.userId,
        schedule.operator_id,
        schedule.route_id,
        schedule.vehicle_id,
        schedule.driver_id,
        request.scheduleId,
        bookingDate,
        schedule.departure_time,
        request.passengersCount,
        totalPrice,
        request.specialRequests || null,
        request.contactInfo.phone,
        request.contactInfo.email,
        confirmationCode
      ]);

      const booking = bookingResult.rows[0];

      // 7. –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î
      const notificationQuery = `
        INSERT INTO transfer_notifications (
          booking_id,
          user_id,
          operator_id,
          type,
          title,
          message,
          is_read,
          created_at
        ) VALUES ($1, $2, $3, $4, $5, $6, false, NOW())
      `;

      await client.query(notificationQuery, [
        booking.id,
        request.userId,
        schedule.operator_id,
        'booking_created',
        '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ',
        `–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ ${schedule.departure_time} –ø–æ –º–∞—Ä—à—Ä—É—Ç—É ${schedule.from_location} ‚Üí ${schedule.to_location} —Å–æ–∑–¥–∞–Ω–æ. –ö–æ–¥: ${confirmationCode}`
      ]);

      // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return {
        success: true,
        booking: {
          ...booking,
          scheduleInfo: {
            fromLocation: schedule.from_location,
            toLocation: schedule.to_location,
            departureTime: schedule.departure_time,
            remainingSeats: newAvailableSeats
          }
        }
      };
    });

  } catch (error: any) {
    console.error('Critical error in createBookingWithLock:', error);
    
    return {
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
      errorCode: 'INTERNAL_ERROR'
    };
  }
}

/**
 * –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–µ—Å—Ç (hold)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–ø–ª–∞—Ç—ã
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ timeout (15 –º–∏–Ω—É—Ç)
 */
export async function holdSeats(
  scheduleId: string,
  passengersCount: number,
  userId: string,
  timeoutMinutes: number = 15
): Promise<BookingResult> {
  try {
    return await transaction(async (client: PoolClient) => {
      // –ë–ª–æ–∫–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
      const lockQuery = `
        SELECT available_seats
        FROM transfer_schedules
        WHERE id = $1 AND is_active = true
        FOR UPDATE NOWAIT
      `;

      let scheduleResult;
      try {
        scheduleResult = await client.query(lockQuery, [scheduleId]);
      } catch (error: any) {
        if (error.code === '55P03') {
          return {
            success: false,
            error: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
            errorCode: 'LOCK_TIMEOUT'
          };
        }
        throw error;
      }

      if (scheduleResult.rows.length === 0) {
        return {
          success: false,
          error: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
          errorCode: 'SCHEDULE_NOT_FOUND'
        };
      }

      const availableSeats = scheduleResult.rows[0].available_seats;

      if (availableSeats < passengersCount) {
        return {
          success: false,
          error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç',
          errorCode: 'INSUFFICIENT_SEATS'
        };
      }

      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ (–Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É seat_holds)
      const holdQuery = `
        INSERT INTO seat_holds (
          schedule_id,
          user_id,
          seats_count,
          expires_at,
          created_at
        ) VALUES ($1, $2, $3, NOW() + INTERVAL '${timeoutMinutes} minutes', NOW())
        RETURNING *
      `;

      const holdResult = await client.query(holdQuery, [
        scheduleId,
        userId,
        passengersCount
      ]);

      return {
        success: true,
        booking: holdResult.rows[0]
      };
    });

  } catch (error: any) {
    console.error('Error in holdSeats:', error);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º–µ—Å—Ç',
      errorCode: 'HOLD_ERROR'
    };
  }
}

/**
 * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
 */
export async function releaseHold(holdId: string): Promise<boolean> {
  try {
    return await transaction(async (client: PoolClient) => {
      const query = `
        DELETE FROM seat_holds
        WHERE id = $1
        RETURNING *
      `;

      const result = await client.query(query, [holdId]);
      return (result.rowCount ?? 0) > 0;
    });
  } catch (error) {
    console.error('Error releasing hold:', error);
    return false;
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ (–∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ cron –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
 */
export async function cleanupExpiredHolds(): Promise<number> {
  try {
    return await transaction(async (client: PoolClient) => {
      const query = `
        DELETE FROM seat_holds
        WHERE expires_at < NOW()
        RETURNING id
      `;

      const result = await client.query(query);
      return result.rowCount || 0;
    });
  } catch (error) {
    console.error('Error cleaning up expired holds:', error);
    return 0;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
 */
function generateConfirmationCode(): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  for (let i = 0; i < 10; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Å—Ç –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI)
 */
export async function checkAvailability(
  scheduleId: string,
  passengersCount: number
): Promise<{
  available: boolean;
  seatsLeft: number;
}> {
  const { query } = await import('@/lib/database');
  
  try {
    const result = await query(
      `SELECT available_seats FROM transfer_schedules WHERE id = $1 AND is_active = true`,
      [scheduleId]
    );

    if (result.rows.length === 0) {
      return { available: false, seatsLeft: 0 };
    }

    const seatsLeft = result.rows[0].available_seats;
    return {
      available: seatsLeft >= passengersCount,
      seatsLeft
    };
  } catch (error) {
    console.error('Error checking availability:', error);
    return { available: false, seatsLeft: 0 };
  }
}

/**
 * –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –º–µ—Å—Ç
 */
export async function cancelBooking(
  bookingId: string,
  reason?: string
): Promise<BookingResult> {
  try {
    return await transaction(async (client: PoolClient) => {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
      const bookingQuery = `
        SELECT * FROM transfer_bookings
        WHERE id = $1 AND status IN ('pending', 'confirmed')
        FOR UPDATE
      `;

      const bookingResult = await client.query(bookingQuery, [bookingId]);

      if (bookingResult.rows.length === 0) {
        return {
          success: false,
          error: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
          errorCode: 'BOOKING_NOT_FOUND'
        };
      }

      const booking = bookingResult.rows[0];

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ—Å—Ç–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
      const updateSeatsQuery = `
        UPDATE transfer_schedules
        SET 
          available_seats = available_seats + $1,
          updated_at = NOW()
        WHERE id = $2
      `;

      await client.query(updateSeatsQuery, [
        booking.passengers_count,
        booking.schedule_id
      ]);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      const cancelQuery = `
        UPDATE transfer_bookings
        SET 
          status = 'cancelled',
          updated_at = NOW()
        WHERE id = $1
        RETURNING *
      `;

      const cancelResult = await client.query(cancelQuery, [bookingId]);

      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
      const notificationQuery = `
        INSERT INTO transfer_notifications (
          booking_id,
          user_id,
          operator_id,
          type,
          title,
          message,
          created_at
        ) VALUES ($1, $2, $3, 'booking_cancelled', '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', $4, NOW())
      `;

      await client.query(notificationQuery, [
        bookingId,
        booking.user_id,
        booking.operator_id,
        reason || '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
      ]);

      return {
        success: true,
        booking: cancelResult.rows[0]
      };
    });

  } catch (error) {
    console.error('Error cancelling booking:', error);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
      errorCode: 'CANCEL_ERROR'
    };
  }
}
