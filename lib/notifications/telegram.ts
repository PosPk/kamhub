// =============================================
// –°–ï–†–í–ò–° TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
// Kamchatour Hub - Telegram Notification Service
// =============================================

interface TelegramMessage {
  chatId: string;
  text: string;
  parseMode?: 'HTML' | 'Markdown';
  replyMarkup?: {
    inline_keyboard?: Array<Array<{
      text: string;
      callback_data: string;
    }>>;
  };
}

interface TelegramResponse {
  success: boolean;
  messageId?: number;
  error?: string;
}

export class TelegramNotificationService {
  private botToken: string;
  private baseUrl: string;

  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN || '';
    this.baseUrl = `https://api.telegram.org/bot${this.botToken}`;
    
    if (!this.botToken) {
      console.warn('TELEGRAM_BOT_TOKEN not configured');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
  async sendMessage(message: TelegramMessage): Promise<TelegramResponse> {
    if (!this.botToken) {
      return {
        success: false,
        error: 'Telegram bot not configured'
      };
    }

    try {
      const response = await fetch(`${this.baseUrl}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: message.chatId,
          text: message.text,
          parse_mode: message.parseMode || 'HTML',
          reply_markup: message.replyMarkup
        })
      });

      const data = await response.json();

      if (data.ok) {
        return {
          success: true,
          messageId: data.result.message_id
        };
      } else {
        return {
          success: false,
          error: data.description || 'Unknown error'
        };
      }
    } catch (error) {
      console.error('Telegram sending error:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
  async sendDriverNotification(chatId: string, booking: {
    id: string;
    route: string;
    date: string;
    time: string;
    passengers: number;
    price: number;
    passengerName: string;
    passengerPhone: string;
    meetingPoint: string;
  }): Promise<TelegramResponse> {
    const text = `
üöó <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä</b>

üìã <b>–î–µ—Ç–∞–ª–∏ –ø–æ–µ–∑–¥–∫–∏:</b>
‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç: ${booking.route}
‚Ä¢ –î–∞—Ç–∞: ${booking.date}
‚Ä¢ –í—Ä–µ–º—è: ${booking.time}
‚Ä¢ –ü–∞—Å—Å–∞–∂–∏—Ä—ã: ${booking.passengers}
‚Ä¢ –¶–µ–Ω–∞: ${booking.price} ‚ÇΩ

üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Å—Å–∞–∂–∏—Ä–µ:</b>
‚Ä¢ –ò–º—è: ${booking.passengerName}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <a href="tel:${booking.passengerPhone}">${booking.passengerPhone}</a>
‚Ä¢ –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: ${booking.meetingPoint}

üÜî <b>ID –∑–∞—è–≤–∫–∏:</b> ${booking.id}
    `;

    const replyMarkup = {
      inline_keyboard: [
        [
          {
            text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å',
            callback_data: `accept_booking_${booking.id}`
          },
          {
            text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
            callback_data: `reject_booking_${booking.id}`
          }
        ],
        [
          {
            text: 'üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä—É',
            callback_data: `call_passenger_${booking.passengerPhone}`
          }
        ]
      ]
    };

    return this.sendMessage({
      chatId,
      text,
      parseMode: 'HTML',
      replyMarkup
    });
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏
  async sendBookingAccepted(chatId: string, booking: {
    id: string;
    route: string;
    date: string;
    time: string;
    driverName: string;
    driverPhone: string;
  }): Promise<TelegramResponse> {
    const text = `
‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>

üìã <b>–î–µ—Ç–∞–ª–∏ –ø–æ–µ–∑–¥–∫–∏:</b>
‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç: ${booking.route}
‚Ä¢ –î–∞—Ç–∞: ${booking.date}
‚Ä¢ –í—Ä–µ–º—è: ${booking.time}

üë®‚Äçüíº <b>–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å:</b>
‚Ä¢ –ò–º—è: ${booking.driverName}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <a href="tel:${booking.driverPhone}">${booking.driverPhone}</a>

üÜî <b>ID –∑–∞—è–≤–∫–∏:</b> ${booking.id}

<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –ø–æ–µ–∑–¥–∫–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.</i>
    `;

    return this.sendMessage({
      chatId,
      text,
      parseMode: 'HTML'
    });
  }

  // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
  async sendBookingRejected(chatId: string, booking: {
    id: string;
    route: string;
    reason: string;
  }): Promise<TelegramResponse> {
    const text = `
‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>

üìã <b>–î–µ—Ç–∞–ª–∏:</b>
‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç: ${booking.route}
‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: ${booking.reason}

üÜî <b>ID –∑–∞—è–≤–∫–∏:</b> ${booking.id}

<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä.</i>
    `;

    return this.sendMessage({
      chatId,
      text,
      parseMode: 'HTML'
    });
  }

  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–µ–∑–¥–∫–µ
  async sendTripReminder(chatId: string, trip: {
    id: string;
    route: string;
    departureTime: string;
    meetingPoint: string;
    driverName: string;
    driverPhone: string;
  }): Promise<TelegramResponse> {
    const text = `
‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–µ–∑–¥–∫–µ</b>

üìã <b>–î–µ—Ç–∞–ª–∏:</b>
‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç: ${trip.route}
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${trip.departureTime}
‚Ä¢ –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: ${trip.meetingPoint}

üë®‚Äçüíº <b>–í–æ–¥–∏—Ç–µ–ª—å:</b>
‚Ä¢ –ò–º—è: ${trip.driverName}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <a href="tel:${trip.driverPhone}">${trip.driverPhone}</a>

üÜî <b>ID –ø–æ–µ–∑–¥–∫–∏:</b> ${trip.id}

<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –ø–æ–µ–∑–¥–∫–µ.</i>
    `;

    const replyMarkup = {
      inline_keyboard: [
        [
          {
            text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º',
            callback_data: `call_driver_${trip.driverPhone}`
          }
        ],
        [
          {
            text: 'üìç –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ',
            callback_data: `show_map_${trip.id}`
          }
        ]
      ]
    };

    return this.sendMessage({
      chatId,
      text,
      parseMode: 'HTML',
      replyMarkup
    });
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
  async sendOperatorStats(chatId: string, stats: {
    period: string;
    totalBookings: number;
    completedTrips: number;
    totalRevenue: number;
    averageRating: number;
    topRoutes: Array<{
      route: string;
      bookings: number;
    }>;
  }): Promise<TelegramResponse> {
    const text = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${stats.period}</b>

üìà <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: <b>${stats.totalBookings}</b>
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–µ–∑–¥–æ–∫: <b>${stats.completedTrips}</b>
‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: <b>${stats.totalRevenue} ‚ÇΩ</b>
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: <b>${stats.averageRating}/5</b>

üèÜ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:</b>
${stats.topRoutes.map(route => 
  `‚Ä¢ ${route.route}: ${route.bookings} –∑–∞—è–≤–æ–∫`
).join('\n')}

<i>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üöÄ</i>
    `;

    return this.sendMessage({
      chatId,
      text,
      parseMode: 'HTML'
    });
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –ø–æ–µ–∑–¥–∫–∏
  async sendTripCancellation(chatId: string, cancellation: {
    id: string;
    route: string;
    date: string;
    reason: string;
    refundAmount?: number;
  }): Promise<TelegramResponse> {
    let text = `
‚ùå <b>–ü–æ–µ–∑–¥–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>

üìã <b>–î–µ—Ç–∞–ª–∏:</b>
‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç: ${cancellation.route}
‚Ä¢ –î–∞—Ç–∞: ${cancellation.date}
‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: ${cancellation.reason}

üÜî <b>ID –ø–æ–µ–∑–¥–∫–∏:</b> ${cancellation.id}
    `;

    if (cancellation.refundAmount) {
      text += `\nüí∞ <b>–í–æ–∑–≤—Ä–∞—Ç:</b> ${cancellation.refundAmount} ‚ÇΩ`;
    }

    text += `\n\n<i>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.</i>`;

    return this.sendMessage({
      chatId,
      text,
      parseMode: 'HTML'
    });
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏
  async sendTripCompleted(chatId: string, trip: {
    id: string;
    route: string;
    rating?: number;
    feedback?: string;
  }): Promise<TelegramResponse> {
    const text = `
‚úÖ <b>–ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

üìã <b>–î–µ—Ç–∞–ª–∏:</b>
‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç: ${trip.route}
‚Ä¢ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}

üÜî <b>ID –ø–æ–µ–∑–¥–∫–∏:</b> ${trip.id}

${trip.rating ? `‚≠ê <b>–û—Ü–µ–Ω–∫–∞:</b> ${trip.rating}/5` : ''}
${trip.feedback ? `üí¨ <b>–û—Ç–∑—ã–≤:</b> ${trip.feedback}` : ''}

<i>–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥! üôè</i>
    `;

    return this.sendMessage({
      chatId,
      text,
      parseMode: 'HTML'
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
  async handleCallbackQuery(callbackQuery: {
    id: string;
    data: string;
    from: {
      id: number;
      username?: string;
    };
  }): Promise<{
    success: boolean;
    response?: string;
    error?: string;
  }> {
    try {
      const [action, type, ...params] = callbackQuery.data.split('_');
      
      switch (action) {
        case 'accept':
          if (type === 'booking') {
            const bookingId = params[0];
            // –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏
            return {
              success: true,
              response: `–ó–∞—è–≤–∫–∞ ${bookingId} –ø—Ä–∏–Ω—è—Ç–∞!`
            };
          }
          break;
          
        case 'reject':
          if (type === 'booking') {
            const bookingId = params[0];
            // –õ–æ–≥–∏–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
            return {
              success: true,
              response: `–ó–∞—è–≤–∫–∞ ${bookingId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`
            };
          }
          break;
          
        case 'call':
          if (type === 'passenger' || type === 'driver') {
            const phone = params[0];
            return {
              success: true,
              response: `–ó–≤–æ–Ω–æ–∫ –Ω–∞ –Ω–æ–º–µ—Ä ${phone}`
            };
          }
          break;
          
        case 'show':
          if (type === 'map') {
            const tripId = params[0];
            return {
              success: true,
              response: `–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–µ–∑–¥–∫–∏ ${tripId}`
            };
          }
          break;
      }
      
      return {
        success: false,
        error: 'Unknown callback action'
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
  async getBotInfo(): Promise<{
    success: boolean;
    info?: any;
    error?: string;
  }> {
    if (!this.botToken) {
      return {
        success: false,
        error: 'Telegram bot not configured'
      };
    }

    try {
      const response = await fetch(`${this.baseUrl}/getMe`);
      const data = await response.json();

      if (data.ok) {
        return {
          success: true,
          info: data.result
        };
      } else {
        return {
          success: false,
          error: data.description || 'Unknown error'
        };
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const telegramService = new TelegramNotificationService();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã
export type { TelegramMessage, TelegramResponse };