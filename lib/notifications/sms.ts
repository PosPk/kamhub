// =============================================
// –°–ï–†–í–ò–° SMS –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
// Kamchatour Hub - SMS Notification Service
// =============================================

import { config } from '@/lib/config';

interface SMSMessage {
  to: string;
  text: string;
  sender?: string;
}

interface SMSResponse {
  success: boolean;
  messageId?: string;
  error?: string;
}

export class SMSNotificationService {
  private apiKey: string;
  private baseUrl: string = 'https://sms.ru/sms/send';

  constructor() {
    this.apiKey = process.env.SMS_RU_API_KEY || '';
    if (!this.apiKey) {
      console.warn('SMS_RU_API_KEY not configured');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ SMS
  async sendSMS(message: SMSMessage): Promise<SMSResponse> {
    if (!this.apiKey) {
      return {
        success: false,
        error: 'SMS service not configured'
      };
    }

    try {
      const formData = new URLSearchParams({
        api_id: this.apiKey,
        to: message.to,
        msg: message.text,
        from: message.sender || 'Kamchatour',
        json: '1'
      });

      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: formData
      });

      const data = await response.json();

      if (data.status === 'OK') {
        return {
          success: true,
          messageId: data.sms[message.to]?.sms_id
        };
      } else {
        return {
          success: false,
          error: data.status_text || 'Unknown error'
        };
      }
    } catch (error) {
      console.error('SMS sending error:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä
  async sendBookingRequest(phone: string, bookingDetails: {
    route: string;
    date: string;
    time: string;
    passengers: number;
    price: number;
  }): Promise<SMSResponse> {
    const text = `üöå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä\n` +
      `–ú–∞—Ä—à—Ä—É—Ç: ${bookingDetails.route}\n` +
      `–î–∞—Ç–∞: ${bookingDetails.date}\n` +
      `–í—Ä–µ–º—è: ${bookingDetails.time}\n` +
      `–ü–∞—Å—Å–∞–∂–∏—Ä—ã: ${bookingDetails.passengers}\n` +
      `–¶–µ–Ω–∞: ${bookingDetails.price} ‚ÇΩ\n\n` +
      `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç`;

    return this.sendSMS({
      to: phone,
      text,
      sender: 'Kamchatour'
    });
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  async sendBookingConfirmation(phone: string, confirmationDetails: {
    confirmationCode: string;
    route: string;
    date: string;
    time: string;
    driverName: string;
    driverPhone: string;
  }): Promise<SMSResponse> {
    const text = `‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ\n` +
      `–ö–æ–¥: ${confirmationDetails.confirmationCode}\n` +
      `–ú–∞—Ä—à—Ä—É—Ç: ${confirmationDetails.route}\n` +
      `–î–∞—Ç–∞: ${confirmationDetails.date}\n` +
      `–í—Ä–µ–º—è: ${confirmationDetails.time}\n` +
      `–í–æ–¥–∏—Ç–µ–ª—å: ${confirmationDetails.driverName}\n` +
      `–¢–µ–ª–µ—Ñ–æ–Ω: ${confirmationDetails.driverPhone}`;

    return this.sendSMS({
      to: phone,
      text,
      sender: 'Kamchatour'
    });
  }

  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–µ–∑–¥–∫–µ
  async sendTripReminder(phone: string, tripDetails: {
    route: string;
    departureTime: string;
    meetingPoint: string;
    driverName: string;
    driverPhone: string;
  }): Promise<SMSResponse> {
    const text = `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–µ–∑–¥–∫–µ\n` +
      `–ú–∞—Ä—à—Ä—É—Ç: ${tripDetails.route}\n` +
      `–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${tripDetails.departureTime}\n` +
      `–ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: ${tripDetails.meetingPoint}\n` +
      `–í–æ–¥–∏—Ç–µ–ª—å: ${tripDetails.driverName}\n` +
      `–¢–µ–ª–µ—Ñ–æ–Ω: ${tripDetails.driverPhone}`;

    return this.sendSMS({
      to: phone,
      text,
      sender: 'Kamchatour'
    });
  }

  // –û—Ç–º–µ–Ω–∞ –ø–æ–µ–∑–¥–∫–∏
  async sendTripCancellation(phone: string, cancellationDetails: {
    route: string;
    date: string;
    reason: string;
    refundAmount?: number;
  }): Promise<SMSResponse> {
    let text = `‚ùå –ü–æ–µ–∑–¥–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n` +
      `–ú–∞—Ä—à—Ä—É—Ç: ${cancellationDetails.route}\n` +
      `–î–∞—Ç–∞: ${cancellationDetails.date}\n` +
      `–ü—Ä–∏—á–∏–Ω–∞: ${cancellationDetails.reason}`;

    if (cancellationDetails.refundAmount) {
      text += `\n–í–æ–∑–≤—Ä–∞—Ç: ${cancellationDetails.refundAmount} ‚ÇΩ`;
    }

    return this.sendSMS({
      to: phone,
      text,
      sender: 'Kamchatour'
    });
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
  async sendDriverNotification(phone: string, bookingDetails: {
    route: string;
    date: string;
    time: string;
    passengers: number;
    price: number;
    bookingId: string;
  }): Promise<SMSResponse> {
    const text = `üöó –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è\n` +
      `–ú–∞—Ä—à—Ä—É—Ç: ${bookingDetails.route}\n` +
      `–î–∞—Ç–∞: ${bookingDetails.date}\n` +
      `–í—Ä–µ–º—è: ${bookingDetails.time}\n` +
      `–ü–∞—Å—Å–∞–∂–∏—Ä—ã: ${bookingDetails.passengers}\n` +
      `–¶–µ–Ω–∞: ${bookingDetails.price} ‚ÇΩ\n` +
      `ID –∑–∞—è–≤–∫–∏: ${bookingDetails.bookingId}\n\n` +
      `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏`;

    return this.sendSMS({
      to: phone,
      text,
      sender: 'Kamchatour'
    });
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
  async sendOperatorStats(phone: string, stats: {
    date: string;
    totalBookings: number;
    totalRevenue: number;
    completedTrips: number;
  }): Promise<SMSResponse> {
    const text = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${stats.date}\n` +
      `–ó–∞—è–≤–æ–∫: ${stats.totalBookings}\n` +
      `–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${stats.completedTrips}\n` +
      `–î–æ—Ö–æ–¥: ${stats.totalRevenue} ‚ÇΩ`;

    return this.sendSMS({
      to: phone,
      text,
      sender: 'Kamchatour'
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ SMS
  async checkSMSStatus(messageId: string): Promise<{
    success: boolean;
    status?: string;
    error?: string;
  }> {
    if (!this.apiKey) {
      return {
        success: false,
        error: 'SMS service not configured'
      };
    }

    try {
      const response = await fetch(
        `https://sms.ru/sms/status?api_id=${this.apiKey}&sms_id=${messageId}&json=1`
      );
      const data = await response.json();

      return {
        success: true,
        status: data.status
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  async getBalance(): Promise<{
    success: boolean;
    balance?: number;
    error?: string;
  }> {
    if (!this.apiKey) {
      return {
        success: false,
        error: 'SMS service not configured'
      };
    }

    try {
      const response = await fetch(
        `https://sms.ru/my/balance?api_id=${this.apiKey}&json=1`
      );
      const data = await response.json();

      return {
        success: true,
        balance: data.balance
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const smsService = new SMSNotificationService();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã
export type { SMSMessage, SMSResponse };