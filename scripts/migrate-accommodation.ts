/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (accommodation)
 * 
 * –°–æ–∑–¥–∞–µ—Ç:
 * - accommodations (—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ)
 * - accommodation_rooms (–Ω–æ–º–µ—Ä–∞)
 * - accommodation_bookings (–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
 * - accommodation_reviews (–æ—Ç–∑—ã–≤—ã)
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npm run migrate:accommodation
 * –∏–ª–∏
 * tsx scripts/migrate-accommodation.ts
 */

import { query, getPool } from '../lib/database';
import fs from 'fs';
import path from 'path';

async function migrate() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é accommodation...\n');

  const pool = getPool();
  const client = await pool.connect();

  try {
    await client.query('BEGIN');

    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const schemaPath = path.join(__dirname, '../lib/database/accommodation_schema.sql');
    const schemaSql = fs.readFileSync(schemaPath, 'utf-8');

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = schemaSql
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));

    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${commands.length} SQL –∫–æ–º–∞–Ω–¥\n`);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
    for (let i = 0; i < commands.length; i++) {
      const cmd = commands[i];
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
      let cmdType = 'UNKNOWN';
      if (cmd.includes('CREATE TABLE')) cmdType = 'CREATE TABLE';
      else if (cmd.includes('CREATE INDEX')) cmdType = 'CREATE INDEX';
      else if (cmd.includes('CREATE TRIGGER')) cmdType = 'CREATE TRIGGER';
      else if (cmd.includes('CREATE FUNCTION')) cmdType = 'CREATE FUNCTION';
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –æ–±—ä–µ–∫—Ç–∞
      const nameMatch = cmd.match(/(?:TABLE|INDEX|TRIGGER|FUNCTION)\s+(?:IF NOT EXISTS\s+)?(\w+)/i);
      const objName = nameMatch ? nameMatch[1] : '???';
      
      console.log(`[${i + 1}/${commands.length}] ${cmdType} ${objName}...`);
      
      try {
        await client.query(cmd + ';');
        console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω–æ\n`);
      } catch (error: any) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "already exists"
        if (error.message.includes('already exists')) {
          console.log(`  ‚ö†Ô∏è  –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø—Ä–æ–ø—É—â–µ–Ω–æ)\n`);
        } else {
          throw error;
        }
      }
    }

    await client.query('COMMIT');
    console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
    console.log('  - accommodations');
    console.log('  - accommodation_rooms');
    console.log('  - accommodation_bookings');
    console.log('  - accommodation_reviews');

  } catch (error) {
    await client.query('ROLLBACK');
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  } finally {
    client.release();
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
async function verifyTables() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...\n');

  const tables = [
    'accommodations',
    'accommodation_rooms',
    'accommodation_bookings',
    'accommodation_reviews'
  ];

  for (const table of tables) {
    try {
      const result = await query(`
        SELECT 
          COUNT(*) as row_count,
          (SELECT COUNT(*) FROM information_schema.columns WHERE table_name = $1) as column_count
        FROM ${table}
      `, [table]);

      console.log(`‚úÖ ${table}:`);
      console.log(`   –°—Ç—Ä–æ–∫: ${result.rows[0].row_count}`);
      console.log(`   –ö–æ–ª–æ–Ω–æ–∫: ${result.rows[0].column_count}`);
    } catch (error: any) {
      console.log(`‚ùå ${table}: –ù–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function seedTestData() {
  console.log('\nüå± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–∞—Ä—Ç–Ω—ë—Ä —Ç–∏–ø–∞ 'stay'
    const partnerCheck = await query(`
      SELECT id FROM partners WHERE category = 'stay' LIMIT 1
    `);

    let partnerId: string;

    if (partnerCheck.rows.length === 0) {
      // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞
      const partnerResult = await query(`
        INSERT INTO partners (name, category, description, contact, is_verified)
        VALUES (
          '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞ "–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫"',
          'stay',
          '–ö–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω–∞—è –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞',
          '{"phone": "+7 (4152) 123-456", "email": "hotel@example.com"}',
          true
        )
        RETURNING id
      `);
      partnerId = partnerResult.rows[0].id;
      console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω –ø–∞—Ä—Ç–Ω—ë—Ä (–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞)');
    } else {
      partnerId = partnerCheck.rows[0].id;
      console.log('  ‚ÑπÔ∏è  –ü–∞—Ä—Ç–Ω—ë—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
    const accommodationResult = await query(`
      INSERT INTO accommodations (
        partner_id,
        name,
        type,
        description,
        short_description,
        address,
        coordinates,
        location_zone,
        star_rating,
        total_rooms,
        amenities,
        languages,
        price_per_night_from,
        price_per_night_to,
        rating,
        review_count,
        is_active,
        is_verified
      )
      VALUES (
        $1,
        '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞ "–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫"',
        'hotel',
        '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–∞-–ö–∞–º—á–∞—Ç—Å–∫–æ–≥–æ —Å –≤–∏–¥–æ–º –Ω–∞ –≤—É–ª–∫–∞–Ω—ã. –ö–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞, —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –ø–∞—Ä–∫–æ–≤–∫–∞.',
        '–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞',
        '—É–ª. –õ–µ–Ω–∏–Ω—Å–∫–∞—è, 61, –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫-–ö–∞–º—á–∞—Ç—Å–∫–∏–π',
        '{"lat": 53.0186, "lng": 158.6507}',
        'city_center',
        3,
        50,
        '["wifi", "parking", "breakfast", "restaurant", "bar"]',
        '["ru", "en"]',
        3000,
        8000,
        4.2,
        47,
        true,
        true
      )
      ON CONFLICT DO NOTHING
      RETURNING id
    `, [partnerId]);

    if (accommodationResult.rows.length > 0) {
      const accommodationId = accommodationResult.rows[0].id;
      console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ');

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞
      await query(`
        INSERT INTO accommodation_rooms (
          accommodation_id,
          name,
          room_type,
          description,
          size_sqm,
          max_guests,
          beds_configuration,
          amenities,
          view,
          available_rooms,
          price_per_night
        )
        VALUES 
        (
          $1,
          '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–¥–Ω–æ–º–µ—Å—Ç–Ω—ã–π',
          'single',
          '–£—é—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å –æ–¥–Ω–æ—Å–ø–∞–ª—å–Ω–æ–π –∫—Ä–æ–≤–∞—Ç—å—é',
          18,
          1,
          '[{"type": "single", "count": 1}]',
          '["wifi", "tv", "minibar", "bathroom"]',
          'city',
          10,
          3000
        ),
        (
          $1,
          '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–≤—É—Ö–º–µ—Å—Ç–Ω—ã–π',
          'double',
          '–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å –¥–≤—É—Å–ø–∞–ª—å–Ω–æ–π –∫—Ä–æ–≤–∞—Ç—å—é',
          22,
          2,
          '[{"type": "double", "count": 1}]',
          '["wifi", "tv", "minibar", "bathroom", "bathtub"]',
          'city',
          15,
          4500
        ),
        (
          $1,
          '–õ—é–∫—Å —Å –≤–∏–¥–æ–º –Ω–∞ –≤—É–ª–∫–∞–Ω—ã',
          'suite',
          '–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π –ª—é–∫—Å —Å –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–º –≤–∏–¥–æ–º –Ω–∞ –≤—É–ª–∫–∞–Ω—ã',
          45,
          2,
          '[{"type": "king", "count": 1}]',
          '["wifi", "tv", "minibar", "bathroom", "bathtub", "balcony", "safe"]',
          'volcano',
          5,
          8000
        )
        ON CONFLICT DO NOTHING
      `, [accommodationId]);

      console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–æ–º–µ—Ä–∞ (3 —Ç–∏–ø–∞)');
    } else {
      console.log('  ‚ÑπÔ∏è  –†–∞–∑–º–µ—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    await migrate();
    await verifyTables();
    
    // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\n‚ùì –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ? (y/n)');
    console.log('   (–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: tsx scripts/migrate-accommodation.ts --seed)');
    
    const shouldSeed = process.argv.includes('--seed') || process.argv.includes('-s');
    
    if (shouldSeed) {
      await seedTestData();
    }

    console.log('\nüéâ –ì–æ—Ç–æ–≤–æ!\n');
    process.exit(0);
  } catch (error) {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

main();
