#!/usr/bin/env tsx

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã Timeweb Cloud
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * export TIMEWEB_TOKEN=your_token
 * npm run timeweb:check
 */

import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

// Helper –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
function getErrorMessage(error: unknown): string {
  if (error instanceof Error) return error.message;
  return String(error);
}

interface CheckResult {
  name: string;
  status: 'ok' | 'warning' | 'error';
  message: string;
  details?: string;
}

class TimewebChecker {
  private apiToken: string;
  private apiUrl = 'https://api.timeweb.cloud';
  private results: CheckResult[] = [];

  constructor(apiToken: string) {
    this.apiToken = apiToken;
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async runAllChecks(): Promise<boolean> {
    console.log('üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –°–û–ó–î–ê–ù–ò–Æ –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´\n');
    console.log('='.repeat(60));

    await this.checkAPIToken();
    await this.checkAccountBalance();
    await this.checkAccountLimits();
    await this.checkRegionAvailability();
    await this.checkResourceNames();
    await this.checkEstimatedCosts();

    console.log('\n' + '='.repeat(60));
    console.log('üìä –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò\n');

    this.printResults();

    const hasErrors = this.results.some(r => r.status === 'error');
    const hasWarnings = this.results.some(r => r.status === 'warning');

    if (hasErrors) {
      console.log('\n‚ùå –ü–†–û–í–ï–†–ö–ê –ù–ï –ü–†–û–ô–î–ï–ù–ê');
      console.log('   –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞.');
      return false;
    }

    if (hasWarnings) {
      console.log('\n‚ö†Ô∏è  –ü–†–û–í–ï–†–ö–ê –ü–†–û–ô–î–ï–ù–ê –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò');
      console.log('   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º.');
    } else {
      console.log('\n‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!');
      console.log('   –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å: npm run timeweb:setup');
    }

    return true;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ç–æ–∫–µ–Ω–∞
   */
  private async checkAPIToken(): Promise<void> {
    try {
      const response = await this.apiRequest('GET', '/api/v1/account/status');
      
      if (response.status) {
        this.results.push({
          name: 'API –¢–æ–∫–µ–Ω',
          status: 'ok',
          message: '–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π',
          details: `–ê–∫–∫–∞—É–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${response.status.registered_at ? new Date(response.status.registered_at).toLocaleDateString() : 'N/A'}`,
        });
      } else {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API');
      }
    } catch (error) {
      this.results.push({
        name: 'API –¢–æ–∫–µ–Ω',
        status: 'error',
        message: '–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫',
        details: getErrorMessage(error),
      });
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
   */
  private async checkAccountBalance(): Promise<void> {
    try {
      const response = await this.apiRequest('GET', '/api/v1/account/finances');
      
      const balance = response.finances?.balance || response.balance || 0;
      const estimatedCost = 3000; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü

      if (balance >= estimatedCost) {
        this.results.push({
          name: '–ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞',
          status: 'ok',
          message: `–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: ${balance}‚ÇΩ`,
          details: `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: –º–∏–Ω–∏–º—É–º ${estimatedCost}‚ÇΩ`,
        });
      } else if (balance >= 1000) {
        this.results.push({
          name: '–ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞',
          status: 'warning',
          message: `–ú–∞–ª–æ —Å—Ä–µ–¥—Å—Ç–≤: ${balance}‚ÇΩ`,
          details: `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –¥–æ ${estimatedCost}‚ÇΩ`,
        });
      } else {
        this.results.push({
          name: '–ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞',
          status: 'error',
          message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: ${balance}‚ÇΩ`,
          details: `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º ${estimatedCost}‚ÇΩ`,
        });
      }
    } catch (error) {
      this.results.push({
        name: '–ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞',
        status: 'warning',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å',
        details: getErrorMessage(error),
      });
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞
   */
  private async checkAccountLimits(): Promise<void> {
    try {
      const response = await this.apiRequest('GET', '/api/v1/account/status');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
      const isBlocked = response.status?.is_blocked || false;
      const isPermanentBlocked = response.status?.is_permanent_blocked || false;
      
      if (!isBlocked && !isPermanentBlocked) {
        this.results.push({
          name: '–õ–∏–º–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞',
          status: 'ok',
          message: '–ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω',
          details: '–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤',
        });
      } else {
        this.results.push({
          name: '–õ–∏–º–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞',
          status: 'error',
          message: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
          details: isPermanentBlocked ? '–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞' : '–í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞',
        });
      }
    } catch (error) {
      this.results.push({
        name: '–õ–∏–º–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞',
        status: 'warning',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã',
        details: getErrorMessage(error),
      });
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤
   */
  private async checkRegionAvailability(): Promise<void> {
    try {
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
      const response = await this.apiRequest('GET', '/api/v1/servers');
      
      const servers = response.servers || [];
      const regions = [...new Set(servers.map((s: any) => s.location).filter(Boolean))];
      
      // –î–ª—è –Ω–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ –∂–µ —Ä–µ–≥–∏–æ–Ω—ã –≥–¥–µ —É–∂–µ –µ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä—ã
      // –ò–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ ru-1, ru-2
      const targetRegion = regions.length > 0 ? regions[0] : 'ru-1';

      this.results.push({
        name: '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ–≥–∏–æ–Ω–∞',
        status: 'ok',
        message: `–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–≥–∏–æ–Ω: ${targetRegion}`,
        details: servers.length > 0 ? `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä—ã –≤ —Ä–µ–≥–∏–æ–Ω–µ ${targetRegion}` : '–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–≥–∏–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
      });
    } catch (error) {
      this.results.push({
        name: '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ–≥–∏–æ–Ω–∞',
        status: 'warning',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏–æ–Ω—ã',
        details: '–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–≥–∏–æ–Ω ru-1 (–ú–æ—Å–∫–≤–∞) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
      });
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º—ë–Ω —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
   */
  private async checkResourceNames(): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–≤–µ—Ä—ã
      const serversResponse = await this.apiRequest('GET', '/api/v1/servers');
      const servers = serversResponse.servers || [];
      const hasKamchatourVDS = servers.some((s: any) => 
        s.name && s.name.includes('kamchatour')
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ë–î
      const dbResponse = await this.apiRequest('GET', '/api/v1/databases');
      const databases = dbResponse.databases || [];
      const hasKamchatourDB = databases.some((db: any) => 
        db.name && db.name.includes('kamchatour')
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–∞–∫–µ—Ç—ã
      const bucketsResponse = await this.apiRequest('GET', '/api/v1/storages/buckets');
      const buckets = bucketsResponse.buckets || [];
      const hasKamchatourBucket = buckets.some((b: any) => 
        b.name === 'kamchatour-media'
      );

      if (hasKamchatourVDS || hasKamchatourDB || hasKamchatourBucket) {
        const conflicts = [];
        if (hasKamchatourVDS) conflicts.push('VDS');
        if (hasKamchatourDB) conflicts.push('Database');
        if (hasKamchatourBucket) conflicts.push('S3 Bucket');

        this.results.push({
          name: '–ò–º–µ–Ω–∞ —Ä–µ—Å—É—Ä—Å–æ–≤',
          status: 'error',
          message: '–†–µ—Å—É—Ä—Å—ã —Å —Ç–∞–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç',
          details: `–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã: ${conflicts.join(', ')}. –£–¥–∞–ª–∏—Ç–µ –∏—Ö –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∏–º–µ–Ω–∞.`,
        });
      } else {
        this.results.push({
          name: '–ò–º–µ–Ω–∞ —Ä–µ—Å—É—Ä—Å–æ–≤',
          status: 'ok',
          message: '–ò–º–µ–Ω–∞ —Å–≤–æ–±–æ–¥–Ω—ã',
          details: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ',
        });
      }
    } catch (error) {
      this.results.push({
        name: '–ò–º–µ–Ω–∞ —Ä–µ—Å—É—Ä—Å–æ–≤',
        status: 'warning',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–µ–Ω–∞',
        details: getErrorMessage(error),
      });
    }
  }

  /**
   * –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
   */
  private async checkEstimatedCosts(): Promise<void> {
    const costs = {
      vds: 1200, // 2 vCPU, 4 GB
      database: 1200, // PostgreSQL 2 vCPU, 4 GB
      s3: 50, // 50 GB
      traffic: 0, // –û–±—ã—á–Ω–æ –≤–∫–ª—é—á—ë–Ω
      total: 2450,
    };

    this.results.push({
      name: '–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
      status: 'ok',
      message: `~${costs.total}‚ÇΩ/–º–µ—Å—è—Ü`,
      details: `VDS: ${costs.vds}‚ÇΩ, DB: ${costs.database}‚ÇΩ, S3: ${costs.s3}‚ÇΩ`,
    });
  }

  /**
   * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  private printResults(): void {
    this.results.forEach(result => {
      const icon = result.status === 'ok' ? '‚úÖ' : result.status === 'warning' ? '‚ö†Ô∏è' : '‚ùå';
      console.log(`${icon} ${result.name}: ${result.message}`);
      if (result.details) {
        console.log(`   ${result.details}`);
      }
    });
  }

  /**
   * API –∑–∞–ø—Ä–æ—Å
   */
  private async apiRequest(method: string, endpoint: string): Promise<any> {
    const url = `${this.apiUrl}${endpoint}`;
    const cmd = `curl -s -X ${method} "${url}" -H "Authorization: Bearer ${this.apiToken}" -H "Content-Type: application/json"`;

    try {
      const { stdout } = await execAsync(cmd);
      return JSON.parse(stdout);
    } catch (error) {
      throw new Error(`API request failed: ${getErrorMessage(error)}`);
    }
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  const apiToken = process.env.TIMEWEB_TOKEN;

  if (!apiToken) {
    console.error('‚ùå –û—à–∏–±–∫–∞: TIMEWEB_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
    console.error('\nüìã –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω:');
    console.error('1. https://timeweb.cloud/my/api');
    console.error('2. export TIMEWEB_TOKEN=your_token');
    console.error('3. npm run timeweb:check');
    process.exit(1);
  }

  const checker = new TimewebChecker(apiToken);
  const success = await checker.runAllChecks();

  process.exit(success ? 0 : 1);
}

if (require.main === module) {
  main().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', getErrorMessage(error));
    process.exit(1);
  });
}

export { TimewebChecker };
