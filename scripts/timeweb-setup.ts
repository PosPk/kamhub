#!/usr/bin/env tsx

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Timeweb Cloud –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ KamchaTour Hub
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * 1. –ü–æ–ª—É—á–∏—Ç–µ API token –≤ –ø–∞–Ω–µ–ª–∏ Timeweb Cloud
 * 2. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ: export TIMEWEB_TOKEN=your_token
 * 3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: tsx scripts/timeweb-setup.ts
 */

import { exec } from 'child_process';
import { promisify } from 'util';
import * as fs from 'fs/promises';

const execAsync = promisify(exec);

// Helper –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
function getErrorMessage(error: unknown): string {
  if (error instanceof Error) return error.message;
  return String(error);
}

interface TimewebConfig {
  apiToken: string;
  apiUrl: string;
  project: {
    name: string;
    region: string;
  };
  vds: {
    os: string;
    cpu: number;
    ram: number;
    disk: number;
    preset?: string;
  };
  database: {
    type: string;
    version: string;
    cpu: number;
    ram: number;
    disk: number;
  };
  s3: {
    bucketName: string;
    region: string;
  };
}

class TimewebCloudSetup {
  private config: TimewebConfig;
  private headers: Record<string, string>;

  constructor(config: TimewebConfig) {
    this.config = config;
    this.headers = {
      'Authorization': `Bearer ${config.apiToken}`,
      'Content-Type': 'application/json',
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
   */
  async checkAPI(): Promise<boolean> {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Timeweb Cloud API...');
    
    try {
      const response = await this.apiRequest('GET', '/api/v1/account/status');
      console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log(`   –ê–∫–∫–∞—É–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${response.status?.registered_at ? new Date(response.status.registered_at).toLocaleDateString() : 'N/A'}`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API:', getErrorMessage(error));
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
   */
  async getRegions(): Promise<any[]> {
    console.log('üåç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö...');
    
    try {
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–µ–≥–∏–æ–Ω—ã
      const response = await this.apiRequest('GET', '/api/v1/servers');
      const servers = response.servers || [];
      const regions = [...new Set(servers.map((s: any) => s.location).filter(Boolean))];
      
      if (regions.length > 0) {
        console.log(`‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–µ–≥–∏–æ–Ω—ã: ${regions.join(', ')}`);
        console.log(`   –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–≥–∏–æ–Ω: ${regions[0]}`);
      } else {
        console.log(`‚úÖ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–≥–∏–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${this.config.project.region}`);
      }
      
      return regions.length > 0 ? [{ code: regions[0] }] : [{ code: this.config.project.region }];
    } catch (error) {
      console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–≥–∏–æ–Ω—ã, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–≥–∏–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      return [{ code: this.config.project.region }];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è VDS
   */
  async getVDSPresets(): Promise<any[]> {
    console.log('üíª –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–æ–≤ VDS...');
    
    try {
      const response = await this.apiRequest('GET', '/api/v1/presets/vds');
      console.log(`‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–µ—Å–µ—Ç–æ–≤: ${response.presets?.length || 0}`);
      return response.presets || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–æ–≤:', getErrorMessage(error));
      return [];
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ VDS —Å–µ—Ä–≤–µ—Ä–∞
   */
  async createVDS(): Promise<any> {
    console.log('\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ VDS —Å–µ—Ä–≤–µ—Ä–∞...');
    console.log(`   OS: ${this.config.vds.os}`);
    console.log(`   CPU: ${this.config.vds.cpu} vCPU`);
    console.log(`   RAM: ${this.config.vds.ram} GB`);
    console.log(`   Disk: ${this.config.vds.disk} GB`);
    
    try {
      const payload = {
        name: `${this.config.project.name}-vds`,
        comment: `VDS —Å–µ—Ä–≤–µ—Ä –¥–ª—è ${this.config.project.name}`,
        os_id: this.config.vds.os,
        preset_id: this.config.vds.preset,
        location: this.config.project.region,
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç preset_id:
        configurator: {
          cpu: this.config.vds.cpu,
          ram: this.config.vds.ram * 1024, // MB
          disk: this.config.vds.disk * 1024, // MB
        },
      };

      const response = await this.apiRequest('POST', '/api/v1/servers', payload);
      
      console.log('‚úÖ VDS —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω');
      console.log(`   ID: ${response.server?.id}`);
      console.log(`   IP: ${response.server?.main_ipv4}`);
      console.log(`   –ü–∞—Ä–æ–ª—å: ${response.server?.password || '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email'}`);
      
      return response.server;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VDS:', getErrorMessage(error));
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async createDatabase(): Promise<any> {
    console.log('\nüóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    console.log(`   –í–µ—Ä—Å–∏—è: ${this.config.database.version}`);
    console.log(`   CPU: ${this.config.database.cpu} vCPU`);
    console.log(`   RAM: ${this.config.database.ram} GB`);
    
    try {
      const payload = {
        name: `${this.config.project.name}-db`,
        type: this.config.database.type,
        version: this.config.database.version,
        location: this.config.project.region,
        configurator: {
          cpu: this.config.database.cpu,
          ram: this.config.database.ram * 1024,
          disk: this.config.database.disk * 1024,
        },
      };

      const response = await this.apiRequest('POST', '/api/v1/databases', payload);
      
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞');
      console.log(`   ID: ${response.database?.id}`);
      console.log(`   Host: ${response.database?.host}`);
      console.log(`   Port: ${response.database?.port}`);
      console.log(`   User: ${response.database?.login}`);
      console.log(`   Password: ${response.database?.password || '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email'}`);
      
      return response.database;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î:', getErrorMessage(error));
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ S3 –±–∞–∫–µ—Ç–∞
   */
  async createS3Bucket(): Promise<any> {
    console.log('\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ S3 bucket...');
    console.log(`   –ò–º—è: ${this.config.s3.bucketName}`);
    
    try {
      const payload = {
        name: this.config.s3.bucketName,
        location: this.config.s3.region,
        type: 'public', // –∏–ª–∏ 'private'
      };

      const response = await this.apiRequest('POST', '/api/v1/storages/buckets', payload);
      
      console.log('‚úÖ S3 bucket —Å–æ–∑–¥–∞–Ω');
      console.log(`   ID: ${response.bucket?.id}`);
      console.log(`   Endpoint: ${response.bucket?.hostname}`);
      console.log(`   Access Key: ${response.bucket?.access_key}`);
      console.log(`   Secret Key: ${response.bucket?.secret_key}`);
      
      return response.bucket;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è S3 bucket:', getErrorMessage(error));
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firewall –ø—Ä–∞–≤–∏–ª
   */
  async setupFirewall(serverId: string): Promise<any> {
    console.log('\nüî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firewall...');
    
    const rules = [
      { protocol: 'tcp', port: 22, direction: 'ingress', description: 'SSH' },
      { protocol: 'tcp', port: 80, direction: 'ingress', description: 'HTTP' },
      { protocol: 'tcp', port: 443, direction: 'ingress', description: 'HTTPS' },
      { protocol: 'tcp', port: 3000, direction: 'ingress', description: 'Next.js (temporary)' },
    ];

    try {
      // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –ø—Ä–∞–≤–∏–ª
      const groupPayload = {
        name: `${this.config.project.name}-firewall`,
        description: `Firewall rules for ${this.config.project.name}`,
      };

      const groupResponse = await this.apiRequest('POST', '/api/v1/firewall/groups', groupPayload);
      const groupId = groupResponse.group?.id;

      console.log(`‚úÖ Firewall –≥—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ (ID: ${groupId})`);

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
      for (const rule of rules) {
        await this.apiRequest('POST', `/api/v1/firewall/groups/${groupId}/rules`, rule);
        console.log(`   ‚úÖ –ü—Ä–∞–≤–∏–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${rule.description} (${rule.port})`);
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É
      await this.apiRequest('POST', `/api/v1/servers/${serverId}/firewall`, {
        group_id: groupId,
      });

      console.log(`‚úÖ Firewall –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É`);
      
      return groupResponse.group;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Firewall:', getErrorMessage(error));
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è .env —Ñ–∞–π–ª–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
   */
  async generateEnvFile(resources: any): Promise<void> {
    console.log('\nüìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è .env.production —Ñ–∞–π–ª–∞...');
    
    const envContent = `
# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: ${new Date().toISOString()}
# Timeweb Cloud Configuration –¥–ª—è ${this.config.project.name}

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
NODE_ENV=production
PORT=3000
NEXT_PUBLIC_APP_URL=http://${resources.vds?.main_ipv4}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
DATABASE_URL=postgresql://${resources.database?.login}:${resources.database?.password}@${resources.database?.host}:${resources.database?.port}/${resources.database?.name}?sslmode=require

# S3 Object Storage
S3_ACCESS_KEY_ID=${resources.s3?.access_key}
S3_SECRET_ACCESS_KEY=${resources.s3?.secret_key}
S3_BUCKET_NAME=${resources.s3?.name}
S3_ENDPOINT=https://${resources.s3?.hostname}
S3_REGION=${this.config.s3.region}

# –°–µ—Ä–≤–µ—Ä
SERVER_IP=${resources.vds?.main_ipv4}
SERVER_PASSWORD=${resources.vds?.password}

# AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é)
GROQ_API_KEY=your_groq_api_key_here
DEEPSEEK_API_KEY=your_deepseek_api_key_here
OPENROUTER_API_KEY=your_openrouter_api_key_here

# –ö–∞—Ä—Ç—ã
YANDEX_MAPS_API_KEY=your_yandex_maps_key_here
YANDEX_WEATHER_API_KEY=your_yandex_weather_key_here

# Auth
JWT_SECRET=${this.generateRandomString(32)}
NEXTAUTH_SECRET=${this.generateRandomString(32)}
NEXTAUTH_URL=http://${resources.vds?.main_ipv4}

# Telegram Bot (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here
TELEGRAM_WEBHOOK_URL=http://${resources.vds?.main_ipv4}/api/telegram/webhook

# –ü–ª–∞—Ç–µ–∂–∏ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
CLOUDPAYMENTS_PUBLIC_ID=your_cloudpayments_id
CLOUDPAYMENTS_API_SECRET=your_cloudpayments_secret

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
SENTRY_DSN=your_sentry_dsn_here
`.trim();

    await fs.writeFile('.env.production.timeweb', envContent);
    console.log('‚úÖ –§–∞–π–ª .env.production.timeweb —Å–æ–∑–¥–∞–Ω');
    console.log('   ‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤!');
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö
   */
  async saveResourceInfo(resources: any): Promise<void> {
    console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Å—É—Ä—Å–∞—Ö...');
    
    const info = {
      timestamp: new Date().toISOString(),
      project: this.config.project.name,
      resources: {
        vds: {
          id: resources.vds?.id,
          ip: resources.vds?.main_ipv4,
          name: resources.vds?.name,
          status: resources.vds?.status,
        },
        database: {
          id: resources.database?.id,
          host: resources.database?.host,
          port: resources.database?.port,
          name: resources.database?.name,
          type: this.config.database.type,
        },
        s3: {
          id: resources.s3?.id,
          name: resources.s3?.name,
          endpoint: resources.s3?.hostname,
        },
        firewall: {
          id: resources.firewall?.id,
          name: resources.firewall?.name,
        },
      },
      nextSteps: [
        '1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ SSH',
        '2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç setup-timeweb-server.sh',
        '3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.production.timeweb –≤ .env.production',
        '4. –î–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ API –∫–ª—é—á–∏',
        '5. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é deploy-to-timeweb.sh',
      ],
    };

    await fs.writeFile(
      'timeweb-resources.json',
      JSON.stringify(info, null, 2)
    );
    
    console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ timeweb-resources.json');
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  async setup(): Promise<void> {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Timeweb Cloud –¥–ª—è KamchaTour Hub\n');
    console.log('=' .repeat(60));

    const resources: any = {};
    let rollbackNeeded = false;

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API
      const apiOk = await this.checkAPI();
      if (!apiOk) {
        throw new Error('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.');
      }

      // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö
      await this.getRegions();

      // 3. –°–æ–∑–¥–∞–Ω–∏–µ VDS —Å–µ—Ä–≤–µ—Ä–∞
      console.log('\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ VDS —Å–µ—Ä–≤–µ—Ä–∞...');
      try {
        resources.vds = await this.createVDS();
        rollbackNeeded = true;
        await this.sleep(2000);
      } catch (error) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VDS: ${getErrorMessage(error)}`);
      }

      // 4. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      console.log('\nüóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ PostgreSQL...');
      try {
        resources.database = await this.createDatabase();
        await this.sleep(2000);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î:', getErrorMessage(error));
        await this.rollback(resources);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ë–î: ${getErrorMessage(error)}`);
      }

      // 5. –°–æ–∑–¥–∞–Ω–∏–µ S3 bucket
      console.log('\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ S3 bucket...');
      try {
        resources.s3 = await this.createS3Bucket();
        await this.sleep(2000);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è S3:', getErrorMessage(error));
        await this.rollback(resources);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å S3: ${getErrorMessage(error)}`);
      }

      // 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firewall
      if (resources.vds?.id) {
        console.log('\nüî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firewall...');
        try {
          resources.firewall = await this.setupFirewall(resources.vds.id);
        } catch (error) {
          console.error('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: Firewall –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', getErrorMessage(error));
          // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        }
      }

      // 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è .env —Ñ–∞–π–ª–∞
      await this.generateEnvFile(resources);

      // 8. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      await this.saveResourceInfo(resources);

      console.log('\n' + '='.repeat(60));
      console.log('üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log('='.repeat(60));
      
      console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
      console.log('1. SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É:');
      console.log(`   ssh root@${resources.vds?.main_ipv4}`);
      console.log('   –ü–∞—Ä–æ–ª—å: —Å–º. –≤ timeweb-resources.json');
      console.log('\n2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–µ—Ä–≤–µ—Ä–∞:');
      console.log('   bash scripts/setup-timeweb-server.sh');
      console.log('\n3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
      console.log('   mv .env.production.timeweb .env.production');
      console.log('   nano .env.production  # –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏');
      console.log('\n4. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:');
      console.log('   bash scripts/deploy-to-timeweb.sh');

    } catch (error) {
      console.error('\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ù–ê–°–¢–†–û–ô–ö–ï:', getErrorMessage(error));
      
      if (rollbackNeeded) {
        console.error('\nüîÑ –ó–∞–ø—É—Å–∫ –æ—Ç–∫–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...');
        await this.rollback(resources);
      }
      
      console.error('\nüí° –°–æ–≤–µ—Ç—ã:');
      console.error('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å: https://timeweb.cloud/my/finance');
      console.error('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω: https://timeweb.cloud/my/api');
      console.error('   ‚Ä¢ –£–¥–∞–ª–∏—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã');
      console.error('   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É: npm run timeweb:check');
      
      throw error;
    }
  }

  /**
   * –û—Ç–∫–∞—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  async rollback(resources: any): Promise<void> {
    console.log('\nüîÑ –û—Ç–∫–∞—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...');

    try {
      // –£–¥–∞–ª—è–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è
      
      if (resources.firewall?.id) {
        console.log('   –£–¥–∞–ª–µ–Ω–∏–µ Firewall –≥—Ä—É–ø–ø—ã...');
        try {
          await this.apiRequest('DELETE', `/api/v1/firewall/groups/${resources.firewall.id}`);
          console.log('   ‚úÖ Firewall —É–¥–∞–ª—ë–Ω');
        } catch (e) {
          console.log('   ‚ö†Ô∏è Firewall –Ω–µ —É–¥–∞–ª—ë–Ω:', getErrorMessage(e));
        }
      }

      if (resources.s3?.id) {
        console.log('   –£–¥–∞–ª–µ–Ω–∏–µ S3 bucket...');
        try {
          await this.apiRequest('DELETE', `/api/v1/storages/buckets/${resources.s3.id}`);
          console.log('   ‚úÖ S3 bucket —É–¥–∞–ª—ë–Ω');
        } catch (e) {
          console.log('   ‚ö†Ô∏è S3 bucket –Ω–µ —É–¥–∞–ª—ë–Ω:', getErrorMessage(e));
        }
      }

      if (resources.database?.id) {
        console.log('   –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        try {
          await this.apiRequest('DELETE', `/api/v1/databases/${resources.database.id}`);
          console.log('   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞');
        } catch (e) {
          console.log('   ‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–µ–Ω–∞:', getErrorMessage(e));
        }
      }

      if (resources.vds?.id) {
        console.log('   –£–¥–∞–ª–µ–Ω–∏–µ VDS —Å–µ—Ä–≤–µ—Ä–∞...');
        try {
          await this.apiRequest('DELETE', `/api/v1/servers/${resources.vds.id}`);
          console.log('   ‚úÖ VDS —Å–µ—Ä–≤–µ—Ä —É–¥–∞–ª—ë–Ω');
        } catch (e) {
          console.log('   ‚ö†Ô∏è VDS —Å–µ—Ä–≤–µ—Ä –Ω–µ —É–¥–∞–ª—ë–Ω:', getErrorMessage(e));
        }
      }

      console.log('\n‚úÖ –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω');
      console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–Ω–µ–ª—å Timeweb Cloud –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è');
      
    } catch (error) {
      console.error('\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ:', getErrorMessage(error));
      console.error('   –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é —É–¥–∞–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –≤ –ø–∞–Ω–µ–ª–∏ Timeweb Cloud');
    }
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */

  private async apiRequest(
    method: string,
    endpoint: string,
    data?: any
  ): Promise<any> {
    const url = `${this.config.apiUrl}${endpoint}`;
    
    const options: any = {
      method,
      headers: this.headers,
    };

    if (data) {
      options.body = JSON.stringify(data);
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º curl –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ –≤ —ç—Ç–æ–π —Å—Ä–µ–¥–µ)
    const curlCmd = this.buildCurlCommand(method, url, data);
    
    try {
      const { stdout } = await execAsync(curlCmd);
      return JSON.parse(stdout);
    } catch (error) {
      throw new Error(`API Request failed: ${getErrorMessage(error)}`);
    }
  }

  private buildCurlCommand(method: string, url: string, data?: any): string {
    let cmd = `curl -X ${method} "${url}"`;
    
    Object.entries(this.headers).forEach(([key, value]) => {
      cmd += ` -H "${key}: ${value}"`;
    });

    if (data) {
      cmd += ` -d '${JSON.stringify(data)}'`;
    }

    cmd += ' 2>/dev/null';
    
    return cmd;
  }

  private sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  private generateRandomString(length: number): string {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < length; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API —Ç–æ–∫–µ–Ω–∞
  const apiToken = process.env.TIMEWEB_TOKEN;
  
  if (!apiToken) {
    console.error('‚ùå –û—à–∏–±–∫–∞: API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    console.error('\nüìã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API —Ç–æ–∫–µ–Ω:');
    console.error('1. –í–æ–π–¥–∏—Ç–µ –≤ –ø–∞–Ω–µ–ª—å Timeweb Cloud: https://timeweb.cloud/my');
    console.error('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "API"');
    console.error('3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω');
    console.error('4. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ: export TIMEWEB_TOKEN=your_token');
    console.error('5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞: tsx scripts/timeweb-setup.ts');
    process.exit(1);
  }

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è KamchaTour Hub
  const config: TimewebConfig = {
    apiToken,
    apiUrl: 'https://api.timeweb.cloud',
    project: {
      name: 'kamchatour-hub',
      region: 'ru-1', // –ú–æ—Å–∫–≤–∞
    },
    vds: {
      os: 'ubuntu-22.04',
      cpu: 2,
      ram: 4,
      disk: 60,
    },
    database: {
      type: 'postgres',
      version: '15',
      cpu: 2,
      ram: 4,
      disk: 50,
    },
    s3: {
      bucketName: 'kamchatour-media',
      region: 'ru-1',
    },
  };

  const setup = new TimewebCloudSetup(config);
  await setup.setup();
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main().catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

export type { TimewebConfig };
export { TimewebCloudSetup };
