#!/bin/bash

#########################################
# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô BACKUP –ë–î
# Kamchatour Hub Database Backup Script
#########################################
#
# –§—É–Ω–∫—Ü–∏–∏:
# - Full backup PostgreSQL
# - –ö–æ–º–ø—Ä–µ—Å—Å–∏—è gzip
# - –ó–∞–≥—Ä—É–∑–∫–∞ –≤ S3 / Cloud Storage
# - –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö backup
# - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ alerting
#
# –ó–∞–ø—É—Å–∫: ./backup-db.sh
# Cron: 0 */6 * * * /path/to/backup-db.sh
#
#########################################

set -euo pipefail

# =============================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =============================================

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏–ª–∏ –∏–∑ .env —Ñ–∞–π–ª–∞)
DB_HOST="${DATABASE_HOST:-localhost}"
DB_PORT="${DATABASE_PORT:-5432}"
DB_NAME="${DATABASE_NAME:-kamchatour}"
DB_USER="${DATABASE_USER:-postgres}"
DB_PASSWORD="${DATABASE_PASSWORD:-}"

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
BACKUP_DIR="${BACKUP_DIR:-/var/backups/kamchatour}"
TEMP_DIR="/tmp/kamchatour-backup"
LOG_FILE="/var/log/kamchatour-backup.log"

# Retention (—Å–∫–æ–ª—å–∫–æ —Ö—Ä–∞–Ω–∏—Ç—å)
LOCAL_RETENTION_DAYS=7
S3_RETENTION_DAYS=30

# S3 / Cloud Storage (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
S3_BUCKET="${S3_BUCKET:-kamchatour-backups}"
S3_PATH="db/"
ENABLE_S3="${ENABLE_S3:-false}"

# Telegram alerting (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
TELEGRAM_BOT_TOKEN="${TELEGRAM_BOT_TOKEN:-}"
TELEGRAM_CHAT_ID="${TELEGRAM_CHAT_ID:-}"
ENABLE_TELEGRAM="${ENABLE_TELEGRAM:-false}"

# =============================================
# –§–£–ù–ö–¶–ò–ò
# =============================================

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
send_telegram() {
    if [ "$ENABLE_TELEGRAM" = "true" ] && [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
        local message="$1"
        curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            -d text="${message}" \
            -d parse_mode="HTML" > /dev/null 2>&1 || true
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    local deps=("pg_dump" "gzip")
    
    if [ "$ENABLE_S3" = "true" ]; then
        deps+=("aws")
    fi
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            log "ERROR: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å '$dep' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
            send_telegram "üî¥ <b>Backup failed</b>: $dep not found"
            exit 1
        fi
    done
    
    log "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
setup_directories() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    mkdir -p "$BACKUP_DIR"
    mkdir -p "$TEMP_DIR"
    mkdir -p "$(dirname "$LOG_FILE")"
    
    log "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≥–æ—Ç–æ–≤—ã"
}

# –≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è pg_dump
export_db_vars() {
    if [ -n "$DB_PASSWORD" ]; then
        export PGPASSWORD="$DB_PASSWORD"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ backup
create_backup() {
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_file="kamchatour_${timestamp}.sql"
    local backup_path="${TEMP_DIR}/${backup_file}"
    local compressed_file="${backup_file}.gz"
    local compressed_path="${TEMP_DIR}/${compressed_file}"
    
    log "–ù–∞—á–∞–ª–æ backup: $backup_file"
    
    # pg_dump —Å –æ–ø—Ü–∏—è–º–∏
    if pg_dump \
        -h "$DB_HOST" \
        -p "$DB_PORT" \
        -U "$DB_USER" \
        -d "$DB_NAME" \
        --format=plain \
        --no-owner \
        --no-acl \
        --verbose \
        --file="$backup_path" 2>&1 | tee -a "$LOG_FILE"; then
        
        log "‚úÖ pg_dump –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    else
        log "ERROR: pg_dump failed!"
        send_telegram "üî¥ <b>Backup failed</b>: pg_dump error"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    local file_size=$(stat -f%z "$backup_path" 2>/dev/null || stat -c%s "$backup_path" 2>/dev/null || echo 0)
    local file_size_mb=$((file_size / 1024 / 1024))
    
    log "–†–∞–∑–º–µ—Ä backup: ${file_size_mb} MB"
    
    if [ "$file_size" -lt 1024 ]; then
        log "ERROR: Backup file too small (${file_size} bytes)"
        send_telegram "üî¥ <b>Backup failed</b>: File too small"
        exit 1
    fi
    
    # –ö–æ–º–ø—Ä–µ—Å—Å–∏—è
    log "–ö–æ–º–ø—Ä–µ—Å—Å–∏—è backup..."
    if gzip -9 "$backup_path"; then
        log "‚úÖ –ö–æ–º–ø—Ä–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    else
        log "ERROR: gzip failed!"
        send_telegram "üî¥ <b>Backup failed</b>: Compression error"
        exit 1
    fi
    
    local compressed_size=$(stat -f%z "$compressed_path" 2>/dev/null || stat -c%s "$compressed_path" 2>/dev/null || echo 0)
    local compressed_size_mb=$((compressed_size / 1024 / 1024))
    local compression_ratio=$((100 - (compressed_size * 100 / file_size)))
    
    log "–°–∂–∞—Ç—ã–π —Ä–∞–∑–º–µ—Ä: ${compressed_size_mb} MB (—Å–∂–∞—Ç–∏–µ: ${compression_ratio}%)"
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    cp "$compressed_path" "${BACKUP_DIR}/${compressed_file}"
    log "‚úÖ Backup —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: ${BACKUP_DIR}/${compressed_file}"
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ S3 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if [ "$ENABLE_S3" = "true" ]; then
        upload_to_s3 "$compressed_path" "$compressed_file"
    fi
    
    # –û—á–∏—Å—Ç–∫–∞ temp
    rm -f "$compressed_path"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    send_telegram "‚úÖ <b>Backup —É—Å–ø–µ—à–µ–Ω</b>
üìä –†–∞–∑–º–µ—Ä: ${compressed_size_mb} MB
üíæ –°–∂–∞—Ç–∏–µ: ${compression_ratio}%
üìÅ –§–∞–π–ª: ${compressed_file}"
    
    log "‚úÖ Backup –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: $compressed_file"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤ S3
upload_to_s3() {
    local file_path="$1"
    local file_name="$2"
    local s3_url="s3://${S3_BUCKET}/${S3_PATH}${file_name}"
    
    log "–ó–∞–≥—Ä—É–∑–∫–∞ –≤ S3: $s3_url"
    
    if aws s3 cp "$file_path" "$s3_url" --storage-class STANDARD_IA 2>&1 | tee -a "$LOG_FILE"; then
        log "‚úÖ Backup –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3"
    else
        log "WARNING: S3 upload failed (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–∞–Ω–∏–∫–∏)"
        send_telegram "‚ö†Ô∏è <b>S3 upload warning</b>: Upload failed but local backup exists"
    fi
}

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö backup
cleanup_old_local_backups() {
    log "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö backup (—Å—Ç–∞—Ä—à–µ ${LOCAL_RETENTION_DAYS} –¥–Ω–µ–π)..."
    
    local deleted=0
    while IFS= read -r -d '' file; do
        log "–£–¥–∞–ª–µ–Ω–∏–µ: $file"
        rm -f "$file"
        ((deleted++))
    done < <(find "$BACKUP_DIR" -name "kamchatour_*.sql.gz" -type f -mtime "+${LOCAL_RETENTION_DAYS}" -print0 2>/dev/null || true)
    
    log "‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö backup: $deleted"
}

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö S3 backup
cleanup_old_s3_backups() {
    if [ "$ENABLE_S3" = "true" ]; then
        log "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö S3 backup (—Å—Ç–∞—Ä—à–µ ${S3_RETENTION_DAYS} –¥–Ω–µ–π)..."
        
        local cutoff_date=$(date -u -d "${S3_RETENTION_DAYS} days ago" +%Y-%m-%d 2>/dev/null || \
                           date -u -v-${S3_RETENTION_DAYS}d +%Y-%m-%d 2>/dev/null || \
                           echo "2000-01-01")
        
        aws s3 ls "s3://${S3_BUCKET}/${S3_PATH}" | while read -r line; do
            local file_date=$(echo "$line" | awk '{print $1}')
            local file_name=$(echo "$line" | awk '{print $4}')
            
            if [[ "$file_date" < "$cutoff_date" ]]; then
                log "–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ S3: $file_name"
                aws s3 rm "s3://${S3_BUCKET}/${S3_PATH}${file_name}" 2>&1 | tee -a "$LOG_FILE" || true
            fi
        done
        
        log "‚úÖ –û—á–∏—Å—Ç–∫–∞ S3 –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ backup
verify_latest_backup() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ backup..."
    
    local latest=$(find "$BACKUP_DIR" -name "kamchatour_*.sql.gz" -type f -print0 | xargs -0 ls -t | head -n 1)
    
    if [ -z "$latest" ]; then
        log "WARNING: –ù–µ—Ç backup —Ñ–∞–π–ª–æ–≤!"
        send_telegram "‚ö†Ô∏è <b>Warning</b>: No backup files found"
        return 1
    fi
    
    local age_hours=$(( ($(date +%s) - $(stat -f%m "$latest" 2>/dev/null || stat -c%Y "$latest" 2>/dev/null || echo 0)) / 3600 ))
    
    log "–ü–æ—Å–ª–µ–¥–Ω–∏–π backup: $latest (–≤–æ–∑—Ä–∞—Å—Ç: ${age_hours}—á)"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ gzip
    if gzip -t "$latest" 2>&1 | tee -a "$LOG_FILE"; then
        log "‚úÖ Backup —Ü–µ–ª–æ—Å—Ç–Ω—ã–π"
        return 0
    else
        log "ERROR: Backup –ø–æ–≤—Ä–µ–∂–¥–µ–Ω!"
        send_telegram "üî¥ <b>Critical</b>: Latest backup is corrupted!"
        return 1
    fi
}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ backup
show_statistics() {
    log "==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===================="
    
    local total_backups=$(find "$BACKUP_DIR" -name "kamchatour_*.sql.gz" -type f | wc -l | tr -d ' ')
    local total_size=$(du -sh "$BACKUP_DIR" 2>/dev/null | awk '{print $1}')
    
    log "–í—Å–µ–≥–æ backup: $total_backups"
    log "–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $total_size"
    log "Retention –ª–æ–∫–∞–ª—å–Ω–æ: ${LOCAL_RETENTION_DAYS} –¥–Ω–µ–π"
    log "Retention S3: ${S3_RETENTION_DAYS} –¥–Ω–µ–π"
    log "===================================================="
}

# =============================================
# MAIN
# =============================================

main() {
    log "========================================="
    log "  KAMCHATOUR HUB DATABASE BACKUP"
    log "========================================="
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_dependencies
    setup_directories
    export_db_vars
    
    # –°–æ–∑–¥–∞–Ω–∏–µ backup
    create_backup
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup
    cleanup_old_local_backups
    cleanup_old_s3_backups
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    verify_latest_backup
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    show_statistics
    
    log "========================================="
    log "  BACKUP –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û"
    log "========================================="
}

# –ó–∞–ø—É—Å–∫
main "$@"
